{
    "docs": [
        {
            "location": "/", 
            "text": "This site documents \nPolicies\n, \nStandards\n, \nGuidelines\n and \nProcesses\n for Software Development in use at the \nUniversity of Nottingham\n.\n\n\n\n\nWho is it for?\n\n\nThe content of this site should be considered:\n\n\n\n\nmandatory\n for the Product Centre Application Development team.\n\n\nwith the exception of recommended-only \nGuidelines\n.\n\n\n\n\n\n\nrecommended\n to other developers at the University.\n\n\nof interest\n to external software development parties.\n\n\n\n\n\n\nGlossary of terms\n\n\nMain Terms\n\n\n\n\n\n\n\n\nTerm\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nPolicies\n\n\nBrief formal statements that describe a mandatory action or behaviour, along with its purpose and desired results.\n\n\n\n\n\n\nStandards\n\n\nDecribe the tools, technologies and expected behavour used to comply with \nPolicies\n.\n\n\n\n\n\n\nGuidelines\n\n\nMake recommendations and provide guidance instructions on how to follow \nStandards\n.\n\n\n\n\n\n\nProcesses\n\n\nDescribe the exact implementation of \nPolicies\n, following \nStandards\n and \nGuidelines\n. They describe who does what, when and how.\n\n\n\n\n\n\n\n\n\n\nInternal Processes\n\n\nMany \nUniversity of Nottingham\n Software Development \nProcesses\n are internal only, and so these \nProcesses\n and the \nGuidelines\n that correspond to them are not detailed on this site.\n\n\nThey may be found \nhere\n by authorised parties (such as the Product Centre Application Development team).\n\n\n\n\nWhat's not here?\n\n\nThe site is a work in progress, so some areas that you feel should have documentation may be planned for the future.\n\n\nNotably, this site does \nnot\n provide documentation for:\n\n\n\n\nAnything that should remain internal to the University.\n\n\nDocumentation for these things can be found on a private \ninternal docs\n site.\n\n\n\n\n\n\nDocumentation for individual applications produced by the University.\n\n\nThese applications should have general documentation contained within their source repositories.\n\n\nOn \nGithub\n this documentation may be published as a Github Pages site.\n\n\nInternally this documentation may be published on an \ninternal docs\n site.\n\n\n\n\n\n\nThese applications may also have instance specific documentation which will be held internally to the University by the Service Management team.\n\n\n\n\n\n\n\n\nContributing to this documentation\n\n\nRefer to the site's \nGit repository\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#glossary-of-terms", 
            "text": "", 
            "title": "Glossary of terms"
        }, 
        {
            "location": "/#main-terms", 
            "text": "Term  Definition      Policies  Brief formal statements that describe a mandatory action or behaviour, along with its purpose and desired results.    Standards  Decribe the tools, technologies and expected behavour used to comply with  Policies .    Guidelines  Make recommendations and provide guidance instructions on how to follow  Standards .    Processes  Describe the exact implementation of  Policies , following  Standards  and  Guidelines . They describe who does what, when and how.      Internal Processes  Many  University of Nottingham  Software Development  Processes  are internal only, and so these  Processes  and the  Guidelines  that correspond to them are not detailed on this site.  They may be found  here  by authorised parties (such as the Product Centre Application Development team).", 
            "title": "Main Terms"
        }, 
        {
            "location": "/#whats-not-here", 
            "text": "The site is a work in progress, so some areas that you feel should have documentation may be planned for the future.  Notably, this site does  not  provide documentation for:   Anything that should remain internal to the University.  Documentation for these things can be found on a private  internal docs  site.    Documentation for individual applications produced by the University.  These applications should have general documentation contained within their source repositories.  On  Github  this documentation may be published as a Github Pages site.  Internally this documentation may be published on an  internal docs  site.    These applications may also have instance specific documentation which will be held internally to the University by the Service Management team.", 
            "title": "What's not here?"
        }, 
        {
            "location": "/#contributing-to-this-documentation", 
            "text": "Refer to the site's  Git repository .", 
            "title": "Contributing to this documentation"
        }, 
        {
            "location": "/policies/", 
            "text": "What are Policies?\n\n\nPolicies\n are brief formal statements that describe a mandatory action or behaviour, along with its purpose and desired results.\n\n\nThe \nhomepage\n has a glossary of associated terms.\n\n\n\n\n1. Code Quality and Style\n\n\n1.0.1 We write high quality code.\nEnsuring the \nquality\n of our code is both \nconsistent\n and to a \nhigh standard\n makes the following easier:\nTo have confidence that our code will perform as expected.\nFor any developer (even those not familiar with the codebase) to maintain the code, or extend it.\n1.0.2 We write code in a consistent style.\nEnsuring the \nstyle\n of our code is both \nconsistent\n and \nfollows accepted conventions\n makes the following easier:\nFor any developer (even those not familiar with the codebase) to maintain the code, or extend it.\nFor third party documentation and guidance to be more likely to be directly useful.\n1.0.3 We use tooling to enforce quality and style.\nEnsuring we use \ntooling\n and \nautomated processes\n wherever possible to enforce \ncode quality\n and \nstyle\n makes the following easier:\nTo be confident that quality and style will be as intended.\nTo avoid having to manually document quality and style rules.\nTo avoid having to manually ensure code meets quality and style rules.\nTo avoid arguments over quality and style rules.\n1.1 Code Comments\n\n\n1.1.1 We use doc comments to document code.\nEnsuring we use \nconventional documentation comments\n wherever possible makes the following easier:\nTo be confident our code's behaviour and intention is well understood.\nFor any developer (even those not familiar with the codebase) to maintain the code, or extend it.\nTo produce API documentation sites automatically.\n1.1.2 We use task comments to indicate work to be done.\nEnsuring we use \ntask comments\n such as \nTODO:\n and \nHACK:\n to indicate \nwork to be done\n makes the following easier:\nTo track work to be done at a location within the codebase. Many editors support highlighting or listing outstanding tasks.\nTo indicate why a sub-optimal or questionable practice is temporary.\n1.1.3 We use code comments to explain unexpected or complex behaviour.\nEnsuring we use \ncomments\n to document \nunexpected\n behaviour, \nunconventional (but necessary)\n approaches, or \ncomplex\n code makes the following easier:\nTo be confident our code's behaviour and intention is well understood.\nFor any developer (even those not familiar with the codebase) to maintain the code, or extend it.\n1.1.4 We don't comment code where behaviour is clear.\nEnsuring we \ndon't comment\n code where the code's \nbehaviour and intention\n are \nalready clear\n makes the following easier:\nTo read large methods which have clear, readable behaviour. Unnecessary comments would provide noise.\nTo save time. No need to type an explanation for something that is self-explanatory.\nTo encourage clear code. Good code is self-documenting (to a degree) and so developers should try and write code that is clear enough without comments whenever possible.\n1.2 Structure\n\n\n1.2.1 We follow common conventional architectural structures, like MVC.\nEnsuring our \napplications\n are \nstructured\n architecturally following \ncommon conventions\n, such as \nMVC\n and its derivatives, makes the following easier:\nFor any developer (even those not familiar with the codebase) to maintain the code, or extend it.\n2. Target Platforms\n\n\n2.1 We target a specific limited set of approved platforms.\nEnsuring we write code for a specific set of approved platforms makes the following easier:\nFor any developer (even those not familiar with the codebase) to maintain the code, or extend it.\nTo focus training needs within the confines of those platforms.\nTo avoid unnecessary proliferation of technologies.\n2.2 We build web apps.\nEnsuring we build \nweb applications\n whenever possible makes the following easier:\nTo avoid dependencies on specific client runtime environments.\nTo avoid the need to update the application to work with newer or different client runtime environments.\n3. Source / Version Control\n\n\n3.1 We use a distributed version control system.\nEnsuring we use a \ndistributed version control\n system to \nmanage our codebase\n makes the following easier:\nTo be confident that code changes are broken down into small manageable chunks.\nTo be comfortable making experimental code changes in isolation from the stable branch.\nTo manage the release of changes to production.\nTo be confident that code is in multiple locations, with no single point of failure to cause loss of work.\n3.2 We use a clearly defined branching workflow.\nEnsuring we use a \nclearly defined\n and conventional \nbranching workflow\n makes the following easier:\nTo manage the release of changes to production.\nFor any developer (even those not familiar with the codebase) to maintain the code, or extend it.\n4. Versioning\n\n\n4.1 We use a clearly defined versioning system that conveys semantic information.\nEnsuring we use a \nclearly defined\n system for \nversioning\n software that conveys \nsemantic information\n about the \nchanges\n in a version makes the following easier:\nFor developers to know when to version bump software, and to what version.\nFor people to understand the implications of a change from one version to another.\n4.2 We use a clearly defined versioning system suitable for continuous releases.\nEnsuring we use a \nclearly defined\n system for \nversioning\n software that is suitable for \ncontinuous releases\n makes the following easier:\nFor developers and testers to refer to a specific release, regardless of whether it is otherwise semantically different to another release.\nFor automated tooling to appropriately version releases.\n5. Code Reviews\n\n\n5.1 We peer review code changes.\nEnsuring we \npeer review code changes\n makes the following easier:\nTo be confident that code is meeting \nStandards\n and complying with \nPolicies\n.\nTo discuss and advise on implementations or designs.\nTo share knowledge between team members.\nTo ensure implementations are appropriate for a given project's requirements.\n5.2 We support reviews with automated tooling.\nEnsuring that we use \nautomated tooling\n to assist with \ncode reviews\n makes the following easier:\nFor developers to not manually have to check that code is compliant with \nPolicies\n.\nTo be confident that the code is in a state to be reviewed and merged.\n6. Continuous Integration\n\n\n6.1 We use Continuous Integration services to regularly build code.\nEnsuring that we \nregularly build\n changes to \nour code\n using \nautomated services\n makes the following easier:\nFor developers to be confident that their changes build.\nTo avoid the need to manually run builds regularly, or for reviews.\nTo be confident of the quality of delivered releases.\n6.2 We use Continuous Integration services to run tests automatically.\nEnsuring that we \nautomatically test\n changes to \nour code\n whenever we \nbuild\n it makes the following easier:\nFor developers to be confident that their changes have not broken tests.\nTo avoid the need to manually run tests for reviews.\nTo be confident of the quality of delivered releases.\n6.3 We use Continuous Integration services to release software.\nEnsuring that we \nrelease our software\n using the \nsame automated tools\n we used to \nbuild and test\n makes the following easier:\nTo be confident we are releasing the exact same code that was successfully built and tested.\nTo avoid manual steps in releases.\nTo guarantee that repeatable release tasks are done the same way every time.\nTo provide a clear audit trail of releases to environments, of specific code versions.\nTo be confident of the quality of delivered releases.", 
            "title": "Policies"
        }, 
        {
            "location": "/policies/#1-code-quality-and-style", 
            "text": "1.0.1 We write high quality code. Ensuring the  quality  of our code is both  consistent  and to a  high standard  makes the following easier: To have confidence that our code will perform as expected. For any developer (even those not familiar with the codebase) to maintain the code, or extend it. 1.0.2 We write code in a consistent style. Ensuring the  style  of our code is both  consistent  and  follows accepted conventions  makes the following easier: For any developer (even those not familiar with the codebase) to maintain the code, or extend it. For third party documentation and guidance to be more likely to be directly useful. 1.0.3 We use tooling to enforce quality and style. Ensuring we use  tooling  and  automated processes  wherever possible to enforce  code quality  and  style  makes the following easier: To be confident that quality and style will be as intended. To avoid having to manually document quality and style rules. To avoid having to manually ensure code meets quality and style rules. To avoid arguments over quality and style rules.", 
            "title": "1. Code Quality and Style"
        }, 
        {
            "location": "/policies/#11-code-comments", 
            "text": "1.1.1 We use doc comments to document code. Ensuring we use  conventional documentation comments  wherever possible makes the following easier: To be confident our code's behaviour and intention is well understood. For any developer (even those not familiar with the codebase) to maintain the code, or extend it. To produce API documentation sites automatically. 1.1.2 We use task comments to indicate work to be done. Ensuring we use  task comments  such as  TODO:  and  HACK:  to indicate  work to be done  makes the following easier: To track work to be done at a location within the codebase. Many editors support highlighting or listing outstanding tasks. To indicate why a sub-optimal or questionable practice is temporary. 1.1.3 We use code comments to explain unexpected or complex behaviour. Ensuring we use  comments  to document  unexpected  behaviour,  unconventional (but necessary)  approaches, or  complex  code makes the following easier: To be confident our code's behaviour and intention is well understood. For any developer (even those not familiar with the codebase) to maintain the code, or extend it. 1.1.4 We don't comment code where behaviour is clear. Ensuring we  don't comment  code where the code's  behaviour and intention  are  already clear  makes the following easier: To read large methods which have clear, readable behaviour. Unnecessary comments would provide noise. To save time. No need to type an explanation for something that is self-explanatory. To encourage clear code. Good code is self-documenting (to a degree) and so developers should try and write code that is clear enough without comments whenever possible.", 
            "title": "1.1 Code Comments"
        }, 
        {
            "location": "/policies/#12-structure", 
            "text": "1.2.1 We follow common conventional architectural structures, like MVC. Ensuring our  applications  are  structured  architecturally following  common conventions , such as  MVC  and its derivatives, makes the following easier: For any developer (even those not familiar with the codebase) to maintain the code, or extend it.", 
            "title": "1.2 Structure"
        }, 
        {
            "location": "/policies/#2-target-platforms", 
            "text": "2.1 We target a specific limited set of approved platforms. Ensuring we write code for a specific set of approved platforms makes the following easier: For any developer (even those not familiar with the codebase) to maintain the code, or extend it. To focus training needs within the confines of those platforms. To avoid unnecessary proliferation of technologies. 2.2 We build web apps. Ensuring we build  web applications  whenever possible makes the following easier: To avoid dependencies on specific client runtime environments. To avoid the need to update the application to work with newer or different client runtime environments.", 
            "title": "2. Target Platforms"
        }, 
        {
            "location": "/policies/#3-source-version-control", 
            "text": "3.1 We use a distributed version control system. Ensuring we use a  distributed version control  system to  manage our codebase  makes the following easier: To be confident that code changes are broken down into small manageable chunks. To be comfortable making experimental code changes in isolation from the stable branch. To manage the release of changes to production. To be confident that code is in multiple locations, with no single point of failure to cause loss of work. 3.2 We use a clearly defined branching workflow. Ensuring we use a  clearly defined  and conventional  branching workflow  makes the following easier: To manage the release of changes to production. For any developer (even those not familiar with the codebase) to maintain the code, or extend it.", 
            "title": "3. Source / Version Control"
        }, 
        {
            "location": "/policies/#4-versioning", 
            "text": "4.1 We use a clearly defined versioning system that conveys semantic information. Ensuring we use a  clearly defined  system for  versioning  software that conveys  semantic information  about the  changes  in a version makes the following easier: For developers to know when to version bump software, and to what version. For people to understand the implications of a change from one version to another. 4.2 We use a clearly defined versioning system suitable for continuous releases. Ensuring we use a  clearly defined  system for  versioning  software that is suitable for  continuous releases  makes the following easier: For developers and testers to refer to a specific release, regardless of whether it is otherwise semantically different to another release. For automated tooling to appropriately version releases.", 
            "title": "4. Versioning"
        }, 
        {
            "location": "/policies/#5-code-reviews", 
            "text": "5.1 We peer review code changes. Ensuring we  peer review code changes  makes the following easier: To be confident that code is meeting  Standards  and complying with  Policies . To discuss and advise on implementations or designs. To share knowledge between team members. To ensure implementations are appropriate for a given project's requirements. 5.2 We support reviews with automated tooling. Ensuring that we use  automated tooling  to assist with  code reviews  makes the following easier: For developers to not manually have to check that code is compliant with  Policies . To be confident that the code is in a state to be reviewed and merged.", 
            "title": "5. Code Reviews"
        }, 
        {
            "location": "/policies/#6-continuous-integration", 
            "text": "6.1 We use Continuous Integration services to regularly build code. Ensuring that we  regularly build  changes to  our code  using  automated services  makes the following easier: For developers to be confident that their changes build. To avoid the need to manually run builds regularly, or for reviews. To be confident of the quality of delivered releases. 6.2 We use Continuous Integration services to run tests automatically. Ensuring that we  automatically test  changes to  our code  whenever we  build  it makes the following easier: For developers to be confident that their changes have not broken tests. To avoid the need to manually run tests for reviews. To be confident of the quality of delivered releases. 6.3 We use Continuous Integration services to release software. Ensuring that we  release our software  using the  same automated tools  we used to  build and test  makes the following easier: To be confident we are releasing the exact same code that was successfully built and tested. To avoid manual steps in releases. To guarantee that repeatable release tasks are done the same way every time. To provide a clear audit trail of releases to environments, of specific code versions. To be confident of the quality of delivered releases.", 
            "title": "6. Continuous Integration"
        }, 
        {
            "location": "/standards/target-platforms/", 
            "text": "We currently offer three platforms for solutions built by Application Development, and they should be chosen based on project needs:\n\n\n\n\nEach platform's own Standards and Guidelines must be followed.\n\n\n\n\n\n\nWe use .NET Core\n\n\n.NET Core can be used to fulfill the following use cases:\n\n\n\n\nClient-facing Web Applications\n\n\n\n\nASP.NET Core MVC\n\n\n\n\n\n\n\n\nApplication / Integration APIs (over HTTP or WebSocket)\n\n\n\n\nASP.NET Core MVC (no frontend)\n\n\n\n\n\n\n\n\nScheduled tasks (when necessary)\n\n\n\n\nConsole application\n\n\n\n\n\n\n\n\n\n\nWe use PHP\n\n\nPHP can be used to fulfill the following use cases:\n\n\n\n\nClient-facing Web Applications\n\n\n\n\n\n\nApplication / Integration APIs (over HTTP or WebSocket)\n\n\n\n\n\n\n\n\nWe use SharePoint\n\n\nSharePoint can be used to fulfill the following use cases:\n\n\n\n\nClient facing Office 365 Apps\n\n\n\n\nClient-side Angular application\n\n\n\n\n\n\n\n\n\n\nWe use node.js (internal only)\n\n\nNode JS may be used at the Senior Developers discretion for internal projects.\n\n\n\n\nLegacy platforms\n\n\nWe still support and maintain some older applications on legacy platforms.\n\n\n\n\nNew projects MUST NOT target these platforms.\n\n\n\n\nWindows Forms, WPF\nWe don't use this anymore because:\nWe prefer to write Web Applications.\nSupports Windows clients only.\nASP.NET 4.x or earlier\nWe don't use this anymore because:\nASP.NET Core has succeeded it.\nIt no longer gets adequate security updates and support.\nASP.NET WebForms\nWe don't use this anymore because:\nASP.NET Core Razor Pages has succeeded it.\nIt no longer gets adequate security updates and support.\nWe have a lack of team expertise in this technology.\nCode behind convention encourages mixing of presentation and logic\nASP.NET Core MVC serves the same use case: Client facing web apps in .NET\nWindows Communication Foundation (WCF)\nWe don't use this anymore because:\nWe have a lack of team expertise in this technology.\nASP.NET Core MVC serves the same use case: Web Services over HTTP or WebSocket\nThis could be reconsidered:\nIf we have a need for web services over other transport protocols as per \nMSDN\nClassic ASP\nWe don't use this anymore because:\nASP.NET Core has succeeded it.\nIt no longer gets adequate security updates and support.\nWe have a lack of team expertise in this technology.\nVisual BASIC 6\nWe don't use this anymore because:\nWe prefer to write Web Applications.\nSupports Windows clients only.\nIt no longer gets adequate security updates and support.\nWe have a lack of team expertise in this technology.\nJava\nWe don't use this anymore because:\nWe have a lack of broad team expertise in this technology.\nWe lack modern processes and workflow in the team for this technology\ne.g. web frameworks, package management, web servers", 
            "title": "Target Platforms"
        }, 
        {
            "location": "/standards/target-platforms/#legacy-platforms", 
            "text": "We still support and maintain some older applications on legacy platforms.   New projects MUST NOT target these platforms.   Windows Forms, WPF We don't use this anymore because: We prefer to write Web Applications. Supports Windows clients only. ASP.NET 4.x or earlier We don't use this anymore because: ASP.NET Core has succeeded it. It no longer gets adequate security updates and support. ASP.NET WebForms We don't use this anymore because: ASP.NET Core Razor Pages has succeeded it. It no longer gets adequate security updates and support. We have a lack of team expertise in this technology. Code behind convention encourages mixing of presentation and logic ASP.NET Core MVC serves the same use case: Client facing web apps in .NET Windows Communication Foundation (WCF) We don't use this anymore because: We have a lack of team expertise in this technology. ASP.NET Core MVC serves the same use case: Web Services over HTTP or WebSocket This could be reconsidered: If we have a need for web services over other transport protocols as per  MSDN Classic ASP We don't use this anymore because: ASP.NET Core has succeeded it. It no longer gets adequate security updates and support. We have a lack of team expertise in this technology. Visual BASIC 6 We don't use this anymore because: We prefer to write Web Applications. Supports Windows clients only. It no longer gets adequate security updates and support. We have a lack of team expertise in this technology. Java We don't use this anymore because: We have a lack of broad team expertise in this technology. We lack modern processes and workflow in the team for this technology e.g. web frameworks, package management, web servers", 
            "title": "Legacy platforms"
        }, 
        {
            "location": "/standards/version-control/", 
            "text": "We use Git\n\n\nCurrent applications should be version controlled in Git.\n\n\n\n\nWhere are our Git repositories?\n\n\n\n\nVisual Studio Team Services\n hosts our private git repositories\n\n\nGithub\n hosts any public repositories.\n\n\n\n\n\n\n\n\nGit workflows\n\n\nWe use two branch workflows for Git, depending on the needs of the project.\n\n\n\n\nWe always use Pull Requests to merge into important branches.\n\n\n\n\n\n\nWhich flow should I use?\n\n\n\n\nUse \nMaster Branch Only\n\n\nIf you're starting a new project\n\n\nUnless you've explicitly agreed with Senior Developers that \nGit Flow\n should be used.\n\n\n\n\n\n\nIf you agree with the Senior Developers that it's time to transition the project to \nMaster Branch Only\n.\n\n\n\n\n\n\nUse \nGit Flow\n\n\nIf your project already uses \nGit Flow\n (i.e. it has a \ndevelop\n branch).\n\n\n\n\n\n\n\n\n\n\nMaster Branch Only\n\n\nThis workflow is simpler, and is based on \nGithub Flow\n but has some caveats around the fact we don't continuously deploy to Production.\n\n\n\n\nFor more detailed guidance, refer to the \nGuidelines\n and \nProcesses\n sections for Git (coming soon).\n\n\n\n\nYour project must support versioning suitable for continuous release when using this workflow.\nCode that can be released from a single continuously integrated \nmaster\n branch must be able to automatically uniquely version a given code commit.\nRefer to \nversioning\n for more information.\n\n\nThe \nmaster\n branch always contains the latest integrated version of the code.\n\n\nmaster\n is a protected branch, and can only acquire code via a pull request\n\n\nReleases to Production must come from \nmaster\n.\n\n\nCommits on \nmaster\n should always be considered safe to deploy.\n\n\n\n\n\n\n\n\nAll other branches are work-in-progress branches. When work is complete:\n\n\n\n\nA version bump may occur, if the changes are meaningful enough to warrant it.\n\n\nA Pull Request is raised and reviewed\n\n\nmerged into \nmaster\n, if review passes.\n\n\n\n\n\n\nAll merges to master undergo automated builds and testing before and after they get there.\n\n\nThey subsequently deploy to any number of pre production environments, for as many stages of testing as are necessary.\n\n\nApproval on an environment allows deployment to the next environment, up until Production.\n\n\nRelease to Production is optional, but a release can be made from any merge to \nmaster\n.\n\n\n\n\nGit Flow\n\n\nMost of our projects use the popular \nGit Flow\n workflow, which details a sensible branching and merging model.\n\n\n\n\nWe have slightly modified Git Flow to accomodate our Pull Request standards.\n\n\n\n\n\n\nFor more detailed guidance, refer to the \nGuidelines\n and \nProcesses\n sections for Git (coming soon).\n\n\n\n\n\n\nThe \nmaster\n branch is either your initial commit (\nreadme.md\n, \n.gitignore\n) or the current production verion of the code.\n\n\nmaster\n is a protected branch, and can only acquire code via a pull request\n\n\nReleases to Production must come from \nmaster\n.\n\n\nReleases to environments must be version tagged e.g. \n1.6.0\n\n\n\n\n\n\nThe \ndevelop\n branch represents the code that will be going into the next release branch, whenever that happens\n\n\ndevelop\n is a protected branch, and can only acquire code via a pull request\n\n\n\n\n\n\nrelease\n branches are for preparing a release to test or production.\n\n\nCreate a \nrelease\n branch when all development for a new release is finished and included in \ndevelop\n\n\nUse the \nrelease\n branch only to prepare for Production. The only changes on \nrelease\n branches should be bug fixes found during testing and changes to version numbering.\n\n\nReleases to Test environments must come from a \nrelease\n branch\n\n\nrelease\n branches should be named after the version they are preparing e.g. \n1.7.0\n\n\nReleases to environments must be tagged e.g. \n1.7.0-beta1\n\n\nWhen a release is ready for production:\n\n\nMake a pull request to merge to \ndevelop\n\n\nMake a pull request to merge to \nmaster\n\n\nYour \nrelease\n branch will then be code reviewed\n\n\n\n\n\n\n\n\n\n\nfeature\n branches are for adding features or fixing bugs to go into the next version\n\n\nCreate a \nfeature\n branch when you start work on a specific task\n\n\nIf there is a JIRA issue for the feature, put it in the branch name\n\n\nOnly do work for this specific task in this branch.\n\n\nWhen you have completed the development work for the task:\n\n\nMake a pull request to merge to \ndevelop\n\n\nYour \nfeature\n branch will then be code reviewed\n\n\n\n\n\n\n\n\n\n\nhotfix\n branches are for fixing urgent bugs to Production\n\n\nCreate a \nhotfix\n branch when you start work on the bug\n\n\nOnly fix the bug in question\n\n\nWhen you have completed the development work for the bug:\n\n\nMake a pull request to merge to \nmaster\n\n\nMake a pull request to merge to \ndevelop\n\n\nYour \nhotfix\n branch will then be code reviewed\n\n\n\n\n\n\n\n\n\n\n\n\nLegacy applications\n\n\nSome legacy applications are still in \nSVN\n or Visual SourceSafe.\n\n\nIf any work is ever done on these applications, their source must be migrated to an appropriate Git repo.", 
            "title": "Version Control"
        }, 
        {
            "location": "/standards/version-control/#git-workflows", 
            "text": "We use two branch workflows for Git, depending on the needs of the project.   We always use Pull Requests to merge into important branches.    Which flow should I use?   Use  Master Branch Only  If you're starting a new project  Unless you've explicitly agreed with Senior Developers that  Git Flow  should be used.    If you agree with the Senior Developers that it's time to transition the project to  Master Branch Only .    Use  Git Flow  If your project already uses  Git Flow  (i.e. it has a  develop  branch).", 
            "title": "Git workflows"
        }, 
        {
            "location": "/standards/version-control/#master-branch-only", 
            "text": "This workflow is simpler, and is based on  Github Flow  but has some caveats around the fact we don't continuously deploy to Production.   For more detailed guidance, refer to the  Guidelines  and  Processes  sections for Git (coming soon).   Your project must support versioning suitable for continuous release when using this workflow. Code that can be released from a single continuously integrated  master  branch must be able to automatically uniquely version a given code commit. Refer to  versioning  for more information.  The  master  branch always contains the latest integrated version of the code.  master  is a protected branch, and can only acquire code via a pull request  Releases to Production must come from  master .  Commits on  master  should always be considered safe to deploy.     All other branches are work-in-progress branches. When work is complete:   A version bump may occur, if the changes are meaningful enough to warrant it.  A Pull Request is raised and reviewed  merged into  master , if review passes.    All merges to master undergo automated builds and testing before and after they get there.  They subsequently deploy to any number of pre production environments, for as many stages of testing as are necessary.  Approval on an environment allows deployment to the next environment, up until Production.  Release to Production is optional, but a release can be made from any merge to  master .", 
            "title": "Master Branch Only"
        }, 
        {
            "location": "/standards/version-control/#git-flow", 
            "text": "Most of our projects use the popular  Git Flow  workflow, which details a sensible branching and merging model.   We have slightly modified Git Flow to accomodate our Pull Request standards.    For more detailed guidance, refer to the  Guidelines  and  Processes  sections for Git (coming soon).    The  master  branch is either your initial commit ( readme.md ,  .gitignore ) or the current production verion of the code.  master  is a protected branch, and can only acquire code via a pull request  Releases to Production must come from  master .  Releases to environments must be version tagged e.g.  1.6.0    The  develop  branch represents the code that will be going into the next release branch, whenever that happens  develop  is a protected branch, and can only acquire code via a pull request    release  branches are for preparing a release to test or production.  Create a  release  branch when all development for a new release is finished and included in  develop  Use the  release  branch only to prepare for Production. The only changes on  release  branches should be bug fixes found during testing and changes to version numbering.  Releases to Test environments must come from a  release  branch  release  branches should be named after the version they are preparing e.g.  1.7.0  Releases to environments must be tagged e.g.  1.7.0-beta1  When a release is ready for production:  Make a pull request to merge to  develop  Make a pull request to merge to  master  Your  release  branch will then be code reviewed      feature  branches are for adding features or fixing bugs to go into the next version  Create a  feature  branch when you start work on a specific task  If there is a JIRA issue for the feature, put it in the branch name  Only do work for this specific task in this branch.  When you have completed the development work for the task:  Make a pull request to merge to  develop  Your  feature  branch will then be code reviewed      hotfix  branches are for fixing urgent bugs to Production  Create a  hotfix  branch when you start work on the bug  Only fix the bug in question  When you have completed the development work for the bug:  Make a pull request to merge to  master  Make a pull request to merge to  develop  Your  hotfix  branch will then be code reviewed", 
            "title": "Git Flow"
        }, 
        {
            "location": "/standards/version-control/#legacy-applications", 
            "text": "Some legacy applications are still in  SVN  or Visual SourceSafe.  If any work is ever done on these applications, their source must be migrated to an appropriate Git repo.", 
            "title": "Legacy applications"
        }, 
        {
            "location": "/standards/versioning/", 
            "text": "Tip\n\n\nWe use two versioning systems. One of them can be considered optional depending on the \nGit workflow\n in use.\n\n\n\n\nSemantic Versioning\n\n\n\n\nWe use \nSemantic Versioning\n (\nSemVer\n)\n\n\nSemVer\n provides application (or API) \nversions\n that contain \nmeaningful semantic information\n by themselves.\n\n\nWe use them so that developers, testers and, sometimes, users can compare version numbers and get a sense of the scope of the change.\n\n\nThey are very much a \npublic\n versioning system intended for \nhumans\n.\n\n\n\n\n\n\nSemVer definition\n\n\nSemVer is a 3 part numeric version number, with an optional string label:\n\n\nMAJOR.MINOR.PATCH-label\n\n\n\n\nThe numbers\n\n\n\n\nIncrement \nMAJOR\n when you make incompatible (breaking) API changes.\n\n\nThis is very rare for us in our client-facing applications, but more common in integration APIs and common code libraries.\n\n\n\n\n\n\nIncrement \nMINOR\n when you new features / functionality but remain backwards compatible.\n\n\nIncrement \nPATCH\n when you make bug fixes.\n\n\n\n\nThe labels\n\n\nSemVer allows use of any labels for any purpose\n\n\nIt is common to use \nalpha.X\n or \nbeta.X\n (where \nX\n is an incrementing number) to pre-release version packages.\n\n\nLabels can be useful when deploying early releases from work-in-progress branches, to identify that the build is not intended to go into production.\n\n\nContinuous Versioning\n\n\n\n\nSemVer doesn't work for Continuous Deployment.\n\n\nSemVer\n is good practice, and provides useful version information to humans, but it breaks down in continuous release workflows, because the automated tooling responsible for releasing cannot make decisions about how meaningful code changes were, and therefore what effect they should have on a Semantic Version.\n\n\nTherefore, in addition to SemVer, we need another versioning system for use with such a workflow.\n\n\n\n\nWhen we use the \nMaster Branch Only\n Git workflow, we are moving towards a Continuous Deployment attitude, and so any given commit in the \nmaster\n branch could be deployed to Production, and therefore \nmust\n be uniquely and identifiably versioned.\n\n\nTypically, we use our CI system to provide a unique version for a given release; either a build or release number, or a git commit hash, or something similar.\n\n\nIdeally, applications will be able to report on this version as well as their human-friendly semantic version (which may not change with every release). The CI system should provide this capability.\n\n\n\n\nTip\n\n\nRefer to \nGuidelines\n for versioning (coming soon) for examples of how this has been done on \nMaster Branch Only\n projects to date.\n\n\n\n\nVersion reporting\n\n\nWe should always be able to find out the version of an application we have made, preferably without having to log in, but preferably not publicly visible all the time.\n\n\n\n\nPublicly accessibly Version reporting on demand\n\n\nIdeally, the version should be returned on request:\n\n\n\n\nfrom a public \n/version\n endpoint in web apps\n\n\nfrom a \n--version\n flag for the rare console apps.\n\n\n\n\n\n\nThe returned version should be at least the SemVer complete with label.\n\n\n\n\n\n\nRefer to platform specific Standards and Guidelines for implementing version reporting.\n\n\n\n\n\n\n\n\nVersion reporting in the front-end\n\n\nOur older web apps tend to have a version at the bottom of every page.\n\n\nThis is acceptable for existing applications, but practically speaking most public users don't care what the version of an app is, so we should avoid this method in future.\n\n\n\n\n\n\nVersion reporting requiring authentication\n\n\nSome of our web apps have a version page at an authenticated route, so we can confirm correct version deployment, but it's frustrating to have to log in.", 
            "title": "Versioning"
        }, 
        {
            "location": "/standards/versioning/#semantic-versioning", 
            "text": "We use  Semantic Versioning  ( SemVer )  SemVer  provides application (or API)  versions  that contain  meaningful semantic information  by themselves.  We use them so that developers, testers and, sometimes, users can compare version numbers and get a sense of the scope of the change.  They are very much a  public  versioning system intended for  humans .    SemVer definition  SemVer is a 3 part numeric version number, with an optional string label:  MAJOR.MINOR.PATCH-label", 
            "title": "Semantic Versioning"
        }, 
        {
            "location": "/standards/versioning/#the-numbers", 
            "text": "Increment  MAJOR  when you make incompatible (breaking) API changes.  This is very rare for us in our client-facing applications, but more common in integration APIs and common code libraries.    Increment  MINOR  when you new features / functionality but remain backwards compatible.  Increment  PATCH  when you make bug fixes.", 
            "title": "The numbers"
        }, 
        {
            "location": "/standards/versioning/#the-labels", 
            "text": "SemVer allows use of any labels for any purpose  It is common to use  alpha.X  or  beta.X  (where  X  is an incrementing number) to pre-release version packages.  Labels can be useful when deploying early releases from work-in-progress branches, to identify that the build is not intended to go into production.", 
            "title": "The labels"
        }, 
        {
            "location": "/standards/versioning/#continuous-versioning", 
            "text": "SemVer doesn't work for Continuous Deployment.  SemVer  is good practice, and provides useful version information to humans, but it breaks down in continuous release workflows, because the automated tooling responsible for releasing cannot make decisions about how meaningful code changes were, and therefore what effect they should have on a Semantic Version.  Therefore, in addition to SemVer, we need another versioning system for use with such a workflow.   When we use the  Master Branch Only  Git workflow, we are moving towards a Continuous Deployment attitude, and so any given commit in the  master  branch could be deployed to Production, and therefore  must  be uniquely and identifiably versioned.  Typically, we use our CI system to provide a unique version for a given release; either a build or release number, or a git commit hash, or something similar.  Ideally, applications will be able to report on this version as well as their human-friendly semantic version (which may not change with every release). The CI system should provide this capability.   Tip  Refer to  Guidelines  for versioning (coming soon) for examples of how this has been done on  Master Branch Only  projects to date.", 
            "title": "Continuous Versioning"
        }, 
        {
            "location": "/standards/versioning/#version-reporting", 
            "text": "We should always be able to find out the version of an application we have made, preferably without having to log in, but preferably not publicly visible all the time.   Publicly accessibly Version reporting on demand  Ideally, the version should be returned on request:   from a public  /version  endpoint in web apps  from a  --version  flag for the rare console apps.    The returned version should be at least the SemVer complete with label.    Refer to platform specific Standards and Guidelines for implementing version reporting.     Version reporting in the front-end  Our older web apps tend to have a version at the bottom of every page.  This is acceptable for existing applications, but practically speaking most public users don't care what the version of an app is, so we should avoid this method in future.    Version reporting requiring authentication  Some of our web apps have a version page at an authenticated route, so we can confirm correct version deployment, but it's frustrating to have to log in.", 
            "title": "Version reporting"
        }, 
        {
            "location": "/standards/continuous-integration/", 
            "text": "We use \nVisual Studio Team Services\n to automate builds and testing of private repositories.\n\n\n\n\n\n\nWe use [Travis-CI] to automate builds and testing of public repositories.\n\n\n\n\nAll projects should have their build tasks completed automatically on pushes to most branches.\n\n\n\n\nmaster\n (and \ndevelop\n if applicable) must always be built\n\n\nall \nPull Requests\n must require passing builds.\n\n\nWork In Progress branches should be built, unless consciously decided otherwise\n\n\nthey should be opt-out, not opt-in\n\n\n\n\n\n\n\n\n\n\nWhat should CI builds do?\n\n\nCI builds should run all build tasks:\n\n\n\n\nDependency management\n\n\nLinting\n\n\nCompilation\n\n\nAutomated testing\n\n\nPreparing deployable artifacts\n\n\n\n\n\n\n\n\nCI builds should use \nRelease\n (or \nProduction\n) configurations as a minimum.\n\n\n\n\nThe CI server should ensure that code you \nplan to deploy\n builds and passes tests\n\n\nIt's a bonus if it does the same for other configurations\n\n\n\n\n\n\nDeployment\n\n\n\n\nWe do not use Continuous Deployment, but we deploy via \nVSTS\n.\n\n\n\n\nMost of our applications are deployed by manually triggering a deployment to an environment on the CI / CD server.\n\n\n\n\nDeployments to Development environments (from the \ndevelop\n or \nmaster\n branch) can be continuous.\n\n\nDeployments to Test environments should be agreed with the Testing Team. They may be able to be continuous.\n\n\nDeployments to Production environments usually depend on gating by our Change Management process.\n\n\nMust be from \nmaster\n. Service Management will not approve Production releases from other branches.\n\n\nIdeally we prepare a release to Production once it has passed all other environments.\n\n\nThe Service Management Team are then free to approve and schedule deployment of the release once all other conditions have been met.\n\n\n\n\n\n\n\n\n[Travis-CI] \nhttps://travis-ci.org", 
            "title": "Continuous Integration"
        }, 
        {
            "location": "/standards/continuous-integration/#deployment", 
            "text": "We do not use Continuous Deployment, but we deploy via  VSTS .   Most of our applications are deployed by manually triggering a deployment to an environment on the CI / CD server.   Deployments to Development environments (from the  develop  or  master  branch) can be continuous.  Deployments to Test environments should be agreed with the Testing Team. They may be able to be continuous.  Deployments to Production environments usually depend on gating by our Change Management process.  Must be from  master . Service Management will not approve Production releases from other branches.  Ideally we prepare a release to Production once it has passed all other environments.  The Service Management Team are then free to approve and schedule deployment of the release once all other conditions have been met.     [Travis-CI]  https://travis-ci.org", 
            "title": "Deployment"
        }, 
        {
            "location": "/standards/code-reviews/", 
            "text": "We regularly peer review all code.\n\n\nTo ensure quality control and encourage collaboration and learning within the team, all projects are subject to mandatory code reviews throughout development.\n\n\n\n\n\n\nWe use the Pull Request functionality in \nGithub\n and \nVSTS\n to review code.\n\n\n\n\n\n\ndevelop\n and \nmaster\n branches can \nonly\n be merged into via Pull Request.\n\n\n\n\n\n\nPull Requests must meet the following requirements to be merged.\n\n\n\n\nAutomated Build and Testing pass.\n\n\nAt least one reviewer approves (who is not an author of the changes being merged).\n\n\nAll review comments must be resolved.\n\n\n\n\n\n\nWhat do we review?\n\n\n\n\nCheck that the standards in this documentation are being followed\n\n\nApproved technologies\n\n\nProject structure\n\n\nCoding standards\n\n\nGit workflow, best practices\n\n\nVersioning\n\n\nCI builds\n\n\n\n\n\n\nIdentify areas of code suitable for turning into future shared common code libraries", 
            "title": "Code Reviews"
        }, 
        {
            "location": "/standards/code-reviews/#what-do-we-review", 
            "text": "Check that the standards in this documentation are being followed  Approved technologies  Project structure  Coding standards  Git workflow, best practices  Versioning  CI builds    Identify areas of code suitable for turning into future shared common code libraries", 
            "title": "What do we review?"
        }, 
        {
            "location": "/standards/javascript/", 
            "text": "Tip\n\n\nBoilerplate configurations for \nJavaScript\n use can be found in the following repositories:\n\n\n\n\nGeneral\n: \nhttps://github.com/UniversityOfNottingham/gulp-boilerplate\n\n\n.NET Core\n: \nhttps://github.com/UniversityOfNottingham/dotnet-boilerplate\n\n\n\n\n\n\n\n\nWe write modern JavaScript, using the latest version of ES supported by \nBabel\n.\n\n\n\n\n\n\nWe use ES6 module syntax, not CommonJS (i.e. \nimport\n not \nrequire\n).\n\n\n\n\n\n\nWe don't specify complex rules. Our tooling configurations do that for us.\n\n\n\n\nTooling\n\n\n\n\nUse \nnpm\n to manage packages.\n\n\n\n\n\n\nUse \nESLint\n to automatically enforce and check code quality.\n\n\n\n\n\n\nUse \nPrettier\n to enforce code style.\n\n\n\n\n\n\nUse \nBabel\n to transpile to browser-supported code.\n\n\n\n\n\n\nUse \nGulp\n to manage build tasks.\n\n\n\n\nDoc Comments\n\n\n\n\nUse \nJSDoc\n for doc commenting, and building API documentation.", 
            "title": "JavaScript"
        }, 
        {
            "location": "/standards/javascript/#tooling", 
            "text": "Use  npm  to manage packages.    Use  ESLint  to automatically enforce and check code quality.    Use  Prettier  to enforce code style.    Use  Babel  to transpile to browser-supported code.    Use  Gulp  to manage build tasks.", 
            "title": "Tooling"
        }, 
        {
            "location": "/standards/javascript/#doc-comments", 
            "text": "Use  JSDoc  for doc commenting, and building API documentation.", 
            "title": "Doc Comments"
        }, 
        {
            "location": "/standards/css/", 
            "text": "Tip\n\n\nBoilerplate configurations for \nCSS\n use can be found in the following repositories:\n\n\n\n\nGeneral\n: \nhttps://github.com/UniversityOfNottingham/gulp-boilerplate\n\n\n.NET Core\n: \nhttps://github.com/UniversityOfNottingham/dotnet-boilerplate\n\n\n\n\n\n\n\n\nWe write SASS in \nscss\n syntax.\n\n\n\n\n\n\nWe don't specify complex rules. Our tooling configurations do that for us.\n\n\n\n\nTooling\n\n\n\n\nUse \nSASS Lint\n to automatically enforce and check code quality.\n\n\n\n\n\n\nUse \nPrettier\n to enforce code style.\n\n\n\n\n\n\nUse \nnode-sass\n to transpile to browser-supported code.\n\n\n\n\n\n\nUse \nGulp\n to manage build tasks.", 
            "title": "CSS"
        }, 
        {
            "location": "/standards/css/#tooling", 
            "text": "Use  SASS Lint  to automatically enforce and check code quality.    Use  Prettier  to enforce code style.    Use  node-sass  to transpile to browser-supported code.    Use  Gulp  to manage build tasks.", 
            "title": "Tooling"
        }, 
        {
            "location": "/standards/php/", 
            "text": "We follow the PHP-FIG \nPSR-2\n standards.\n\n\n\n\n\n\nWe use the latest version of PHP for new applications.\n\n\n\n\n\n\nWe don't make new applications on old versions of PHP.\n\n\n\n\n\n\nWe currently have older applications on PHP 5.6.\n\n\n\n\n\n\nWe have legacy applications on unsupported versions of PHP.", 
            "title": "PHP"
        }, 
        {
            "location": "/standards/dotnet/", 
            "text": "We use the latest stable version of C#.\n\n\n\n\n\n\nWe target .NET Standard and .NET Core whenever possible.\n\n\n\n\n\n\nWe follow the \nJavaScript\n and \nCSS\n standards when working with frontend code in a .NET environment.\n\n\n\n\n\n\nWe maintain a list of approved technologies that solve common domain problems.\n\n\nApproved Technologies:\n \n.NET Core\n | \n.NET Framework\n\n\n\n\nDon't reinvent the wheel.\n\n\nCheck the list to see if your problem is already solved; if not, still investigate third party libraries.\n\n\n\n\n\n\nDon't proliferate technologies unnecessarily.\n\n\nDon't introduce a new technology that solves a problem that's already solved on the list.\n\n\n\n\n\n\n\n\nWe don't specify complex rules. Our tooling configurations do that for us.\n\n\n\n\n\n\nWe don't write new code in other CLR Languages, such as Visual BASIC or F#.\n\n\n\n\n\n\nWe have legacy applications written in VB.NET, or Classic VB.\n\n\n\n\nTooling\n\n\n\n\nUse the latest stable version of \nVisual Studio\n.\n\n\n\n\n\n\nUse \nResharper\n to automatically enforce and check code quality.\n\n\n\n\n\n\nWorking with older projects.\n\n\n\n\nUpgrade the version of Visual Studio to the latest stable when possible\n\n\nFeel free to use new language features once upgraded\n\n\nBut be consistent with the rest of the application where necessary\n\n\n\n\n\n\nConsider everyone (or everything) that builds the project.\n\n\ne.g. Make sure CI tools know how to build the new version.\n\n\n\n\n\n\n\n\n\n\nDoc Comments\n\n\n\n\nUse \nXML Doc Comments\n for doc commenting.\n\n\n\n\n\n\nUse \nSwagger\n with Swashbuckle for building and serving API documentation.\n\n\n\n\nUnit Testing\n\n\n\n\nUnit Testing is encouraged but not yet mandated.\n\n\n\n\n\n\nWe use \nXUnit\n for unit testing.\n\n\n\n\n\n\nSome older .NET Framework applications have unit tests in \nNunit\n 2.x or 3.x.", 
            "title": "Overview"
        }, 
        {
            "location": "/standards/dotnet/#tooling", 
            "text": "Use the latest stable version of  Visual Studio .    Use  Resharper  to automatically enforce and check code quality.    Working with older projects.   Upgrade the version of Visual Studio to the latest stable when possible  Feel free to use new language features once upgraded  But be consistent with the rest of the application where necessary    Consider everyone (or everything) that builds the project.  e.g. Make sure CI tools know how to build the new version.", 
            "title": "Tooling"
        }, 
        {
            "location": "/standards/dotnet/#doc-comments", 
            "text": "Use  XML Doc Comments  for doc commenting.    Use  Swagger  with Swashbuckle for building and serving API documentation.", 
            "title": "Doc Comments"
        }, 
        {
            "location": "/standards/dotnet/#unit-testing", 
            "text": "Unit Testing is encouraged but not yet mandated.    We use  XUnit  for unit testing.    Some older .NET Framework applications have unit tests in  Nunit  2.x or 3.x.", 
            "title": "Unit Testing"
        }, 
        {
            "location": "/standards/dotnet/c-sharp/", 
            "text": "This documentation supports and overrides Resharper's default C# conventions.\n\n\n\n\n\n\nC# conventions - order of priority.\n\n\nThere are various sources of authority for C# conventions, but they should be followed in the following order:\n\n\n\n\nThis documentation\n\n\nResharper\n's recommmendations\n\n\nMicrosoft's \nConventions\n and \nGuidelines\n\n\n\n\n\n\nTypes\n\n\nDon't use arrays.\nUnless you have an exceptional reason.\nJustification\nThe .NET Framework provides a whole host of optimised collection types; pick the one that's right for you.\nC# is a high level language; we shouldn't pre-emptively optimise on memory usage by managing fixed-size collections ourselves - 90% of the time the Framework knows best.\nParameters\n and \nReturn values\n should almost always return an \ninterface\n, not a concrete type\nUse \nICollection\n, \nIEnumerable\n, \nIDictionary\n, \nIQueryable\n etc.\nDon't use an array \n[]\n, and don't use \nList\n or another concrete implementation in the method signature.\nPublic properties\n should usually be \ninterface\n types, not concrete implementations\nespecially if they are properties guaranteed by an \ninterface\nAlmost all collection variables in implementation code should be a .NET class type, not an array\nUse \nList\n, \nDictionary\n, \nHashTable\n, \nStack\n, \nQueue\n etc.\nDon't use an array \n[]\nIf you absolutely want a fixed size collection because it \nmakes your code clearer\n or \nless prone to error\n and it doesn't matter that it's a \nvalue type\n not a \nreference type\n, you may use an array.\nHowever, that sort of thing is usually only appropriate for high performance bare metal applications, or other low level code such as hardware emulators, drivers etc.\nThat sort of code is not usually written in C#, and is almost never necessary in a web application.\nUsings\n\n\nUse top-level usings, not namespaced identifiers.\n//Bad\n\n\nSystem\n.\nNullable\nint\n \nnumber\n;\n\n\n\n//Better\n\n\nusing\n \nSystem\n;\n\n\n...\n\n\nNullable\nint\n \nnumber\n;\n\n\n\n//Best\n\n\nint?\n \nnumber\n;\n\n\n\n\nYou should only have to provide namespaces in your actual code if you are clarifying an ambiguous reference:\nusing\n \nSystem\n;\n\n\nusing\n \nUnity.Engine\n;\n\n\n\nSystem\n.\nRandom\n \ndotNetRandomNumberGenerator\n;\n\n\nUnity\n.\nEngine\n.\nRandom\n \nunityRandomNumberGenerator\n;\n\n\n\n\nIdentifiers\n\n\nDon't put redundant information in identifiers such as variable or method names.\nNo Hungarian notation (the IDE tells you types!)\nsome type names are common and this is acceptable, but be sensible:\nvar\n \nperson\n \n=\n \nnew\n \nPerson\n();\n \n//Fine\n\n\n\nvar\n \npersonClass\n \n=\n \nnew\n \nPerson\n();\n \n//Bad\n\n\n\nvar\n \npersonList\n \n=\n \nnew\n \nList\nPerson\n();\n \n//Bad\n\n\n\nvar\n \npeople\n \n=\n \nnew\n \nList\nPerson\n();\n \n//Good\n\n\n\n\nVariable Initialisation\n\n\nDon't bother assigning the default initial value to a variable.\n//Redundant\n\n\nbool\n \nmyBool\n \n=\n \nfalse\n;\n\n\nstring\n \nmyString\n \n=\n \nnull\n;\n\n\nMyObject\n \nmyObject\n \n=\n \nnull\n;\n\n\nint\n \nmyInt\n \n=\n \n0\n;\n\n\n\n\nDo initialise collections, or object types before attempting to use their members.\n//Necessary\n\n\nvar\n \nmyList\n \n=\n \nnew\n \nList\nT\n();\n\n\nvar\n \nmyObject\n \n=\n \nnew\n \nMyObject\n();\n\n\n\n\nDon't use Constructor initialisation unless you need to run logic or accept parameters.\npublic\n \nclass\n \nMyClass\n\n\n{\n\n    \n//Bad\n\n    \nprivate\n \nbool\n \n_isAwesome\n;\n\n\n    \npublic\n \nMyClass\n()\n\n    \n{\n\n        \n_isAwesome\n \n=\n \ntrue\n;\n\n    \n}\n\n\n    \n...\n\n\n    \n//Good\n\n    \nprivate\n \nbool\n \n_isAwesome\n \n=\n \ntrue\n;\n\n    \n//No default constructor needed!\n\n\n    \n...\n\n\n    \n//Fine\n\n    \nprivate\n \nbool\n \n_isAwesome\n\n\n    \npublic\n \nMyClass\n(\nbool\n \nisAwesome\n)\n\n    \n{\n\n        \n_isAwesome\n \n=\n \nisAwesome\n;\n\n    \n}\n\n\n    \n//In C#6 and newer, you can do this for properties as well!\n\n    \npublic\n \nbool\n \nIsAwesome\n \n{\n \nget\n;\n \nset\n;\n \n}\n \n=\n \ntrue\n;\n\n    \n//No default constructor needed!\n\n\n}\n\n\n\n\nAs before, don't bother setting members to their type's default values.\nMethod declaration\n\n\nUse expression body syntax.\nFrom C#6, if the whole of your method is a single expression (a one line statement), you can use a shorter syntax.\nThis is incredibly common in read service layers that simply call on a repository.\n//Pre C#6\n\n\npublic\n \nIEnumerable\nThing\n \nGetAllTheThings\n()\n\n\n{\n\n    \nreturn\n \n_thingRepo\n.\nList\n();\n\n\n}\n\n\n\n//C#6 and newer\n\n\npublic\n \nIEnumerable\nThing\n \nGetAllTheThings\n()\n \n=\n\n    \n_thingRepo\n.\nList\n();", 
            "title": "C#"
        }, 
        {
            "location": "/standards/dotnet/c-sharp/#types", 
            "text": "Don't use arrays. Unless you have an exceptional reason. Justification The .NET Framework provides a whole host of optimised collection types; pick the one that's right for you. C# is a high level language; we shouldn't pre-emptively optimise on memory usage by managing fixed-size collections ourselves - 90% of the time the Framework knows best. Parameters  and  Return values  should almost always return an  interface , not a concrete type Use  ICollection ,  IEnumerable ,  IDictionary ,  IQueryable  etc. Don't use an array  [] , and don't use  List  or another concrete implementation in the method signature. Public properties  should usually be  interface  types, not concrete implementations especially if they are properties guaranteed by an  interface Almost all collection variables in implementation code should be a .NET class type, not an array Use  List ,  Dictionary ,  HashTable ,  Stack ,  Queue  etc. Don't use an array  [] If you absolutely want a fixed size collection because it  makes your code clearer  or  less prone to error  and it doesn't matter that it's a  value type  not a  reference type , you may use an array. However, that sort of thing is usually only appropriate for high performance bare metal applications, or other low level code such as hardware emulators, drivers etc. That sort of code is not usually written in C#, and is almost never necessary in a web application.", 
            "title": "Types"
        }, 
        {
            "location": "/standards/dotnet/c-sharp/#usings", 
            "text": "Use top-level usings, not namespaced identifiers. //Bad  System . Nullable int   number ;  //Better  using   System ;  ...  Nullable int   number ;  //Best  int?   number ;   You should only have to provide namespaces in your actual code if you are clarifying an ambiguous reference: using   System ;  using   Unity.Engine ;  System . Random   dotNetRandomNumberGenerator ;  Unity . Engine . Random   unityRandomNumberGenerator ;", 
            "title": "Usings"
        }, 
        {
            "location": "/standards/dotnet/c-sharp/#identifiers", 
            "text": "Don't put redundant information in identifiers such as variable or method names. No Hungarian notation (the IDE tells you types!) some type names are common and this is acceptable, but be sensible: var   person   =   new   Person ();   //Fine  var   personClass   =   new   Person ();   //Bad  var   personList   =   new   List Person ();   //Bad  var   people   =   new   List Person ();   //Good", 
            "title": "Identifiers"
        }, 
        {
            "location": "/standards/dotnet/c-sharp/#variable-initialisation", 
            "text": "Don't bother assigning the default initial value to a variable. //Redundant  bool   myBool   =   false ;  string   myString   =   null ;  MyObject   myObject   =   null ;  int   myInt   =   0 ;   Do initialise collections, or object types before attempting to use their members. //Necessary  var   myList   =   new   List T ();  var   myObject   =   new   MyObject ();   Don't use Constructor initialisation unless you need to run logic or accept parameters. public   class   MyClass  { \n     //Bad \n     private   bool   _isAwesome ; \n\n     public   MyClass () \n     { \n         _isAwesome   =   true ; \n     } \n\n     ... \n\n     //Good \n     private   bool   _isAwesome   =   true ; \n     //No default constructor needed! \n\n     ... \n\n     //Fine \n     private   bool   _isAwesome \n\n     public   MyClass ( bool   isAwesome ) \n     { \n         _isAwesome   =   isAwesome ; \n     } \n\n     //In C#6 and newer, you can do this for properties as well! \n     public   bool   IsAwesome   {   get ;   set ;   }   =   true ; \n     //No default constructor needed!  }   As before, don't bother setting members to their type's default values.", 
            "title": "Variable Initialisation"
        }, 
        {
            "location": "/standards/dotnet/c-sharp/#method-declaration", 
            "text": "Use expression body syntax. From C#6, if the whole of your method is a single expression (a one line statement), you can use a shorter syntax. This is incredibly common in read service layers that simply call on a repository. //Pre C#6  public   IEnumerable Thing   GetAllTheThings ()  { \n     return   _thingRepo . List ();  }  //C#6 and newer  public   IEnumerable Thing   GetAllTheThings ()   = \n     _thingRepo . List ();", 
            "title": "Method declaration"
        }, 
        {
            "location": "/standards/dotnet/packages/", 
            "text": "We bundle reusable code into NuGet packages.\n\n\n\n\n\n\nWe publish packages to \nNuget.org\n from \nGithub\n whenever possible.\n\n\n\n\n\n\nWe host packages that cannot be public on private feeds in \nVSTS\n.\n\n\n\n\n\n\nSome older projects use older packages which are hosted on the private \ndotnet-legacy\n feed in \nVSTS\n.\n\n\n\n\nUoN Packages\n\n\n\n\nOur common code packages are all in the \nUoN\n namespace.\n\n\n\n\nStandards for naming packages.\nPackages should be named (and namespaced) based on what they're used for. Sometimes this may make dependencies clear too.\ne.g.\nCommon code for ASP.NET Web API is in the UoN.AspNet.WebApi project\nCommon code for ASP.NET MVC5 would go in UoN.AspNet.Mvc\nCommon code for authentication in ASP.NET Core would go UoN.AspNetCore.Authentication\nor possibly even further if it was specific to implementing a type of authentication: e.g.  UoN.AspNetCore.Authentication.BasicAuth\nUoN\n Nuget packages target .NET Standard whenever possible.\nTry and target the lowest possible version that you require, in order to maximise compatibility.\nA library should only directly target a .NET implementation (i.e. Framework, Mono or Core) if it requires something that implementation provides that the others (or the netstandard spec) do not.\nThis will almost never be true for us.\nPackage code lives in its own Git respository.\nEach package should have its own repository.\nThis makes versioning much easier.\nThe repo can contain version controlled documentation for the library.\nIt makes using Unit Test projects for individual libraries easier.\nIf there are interdependencies on other \nUoN\n libraries, their packages (therefore specifically versioned) should be referenced.\n\n\nPackages should always use the \nMaster Branch Only\n Git workflow.\n\n\n\n\n\n\nPackages are built and released via CI/CD.\n\n\n\n\nUoN.Common (deprecated)\n\n\nThe \nUoN.Common\n packages are still available on \nVSTS\n on the \ndotnet-legacy\n feed, as they are used by a number of existing applications.\n\n\nThey should be considered deprecated and should not be used in new applications.\n\n\nIf there is code in a \nUoN.Common\n package that has not been migrated to a new package, then please migrate it before use.", 
            "title": "NuGet Packages"
        }, 
        {
            "location": "/standards/dotnet/packages/#uon-packages", 
            "text": "Our common code packages are all in the  UoN  namespace.   Standards for naming packages. Packages should be named (and namespaced) based on what they're used for. Sometimes this may make dependencies clear too. e.g. Common code for ASP.NET Web API is in the UoN.AspNet.WebApi project Common code for ASP.NET MVC5 would go in UoN.AspNet.Mvc Common code for authentication in ASP.NET Core would go UoN.AspNetCore.Authentication or possibly even further if it was specific to implementing a type of authentication: e.g.  UoN.AspNetCore.Authentication.BasicAuth UoN  Nuget packages target .NET Standard whenever possible. Try and target the lowest possible version that you require, in order to maximise compatibility. A library should only directly target a .NET implementation (i.e. Framework, Mono or Core) if it requires something that implementation provides that the others (or the netstandard spec) do not. This will almost never be true for us. Package code lives in its own Git respository. Each package should have its own repository. This makes versioning much easier. The repo can contain version controlled documentation for the library. It makes using Unit Test projects for individual libraries easier. If there are interdependencies on other  UoN  libraries, their packages (therefore specifically versioned) should be referenced.  Packages should always use the  Master Branch Only  Git workflow.    Packages are built and released via CI/CD.", 
            "title": "UoN Packages"
        }, 
        {
            "location": "/standards/dotnet/packages/#uoncommon-deprecated", 
            "text": "The  UoN.Common  packages are still available on  VSTS  on the  dotnet-legacy  feed, as they are used by a number of existing applications.  They should be considered deprecated and should not be used in new applications.  If there is code in a  UoN.Common  package that has not been migrated to a new package, then please migrate it before use.", 
            "title": "UoN.Common (deprecated)"
        }, 
        {
            "location": "/standards/dotnet/core/approved-technologies/", 
            "text": ".NET Core\n is now the approved target platform for .NET Applications.\n\n\nPlease \ndo not\n create any new \n.NET Framework\n projects without discussing this with the \nSenior Developers\n.\n\n\n\n\n\n\nApproved Technologies\n\n\nThe Senior Developers have discussed and chosen certain frameworks, libraries and technologies that we prefer to use as a solution for a given need or problem.\n\n\nPlease consult this list when you are looking to solve a problem in your application, to see if we have a preferred way of doing things.\n\n\nThis list can be debated and must evolve, but to see new technologies used or approved, the Senior Developers must be consulted and a case must be made.\n\n\n\n\nTechnologies by use case\n\n\n\n\nThese use cases include\n\n\n\n\napproved technologies\n\n\n\n\n\n\nnotes on optional supporting libraries\n\n\n\n\n\n\nlegacy technologies you might come across, but mustn't use on new apps.\n\n\n\n\n\n\nActive Directory User Authentication\nASP.NET Identity Core\nUoN libraries for authentication and authorisation\nLocal User Accounts\nASP.NET Identity Core\nEntity Framework Core\nUoN libraries for authentication and authorisation\nBasic Authentication\nZNetCS.AspNetCore.Authentication.Basic\nProbably used in conjunction with another Auth backend (e.g. Local or AD)\nRelational Database ORM\nEntity Framework Core\nUse \nCode First Migrations\nInversion of Control (IoC) / Dependency Injection (DI)\nMicrosoft.Extensions.DependencyInjection\nAutofac\nOnly when doing more advanced DI that the above can't perform.\nScheduled Tasks\nHangfire\nQueued Tasks\nHangfire\nEmail sending\nMailkit\nConfigures and performs spec compliant email tasks such as sending over SMTP.\nUoN.AspNetCore.RazorViewRenderer\nRenders a string as a Razor View, allowing for rich email templating.\nError Logging\nNLog\nUnit Testing\nXUnit\nMoq\nJSON\nNewtonsoft.JSON\nFaceted Search\nSeparate ElasticSearch instance\nDon't do search itself within .NET - interact with ES instead.\nElastic Search.NET - low level client\nNEST - high level Elastic Search client\nObject mapping\nAutoMapper\ne.g. ViewModels -\n DTOs -\n Entities or vice versa\nReading / writing CSV files\nCsvHelper", 
            "title": "Approved Technologies"
        }, 
        {
            "location": "/standards/dotnet/core/approved-technologies/#technologies-by-use-case", 
            "text": "These use cases include   approved technologies    notes on optional supporting libraries    legacy technologies you might come across, but mustn't use on new apps.    Active Directory User Authentication ASP.NET Identity Core UoN libraries for authentication and authorisation Local User Accounts ASP.NET Identity Core Entity Framework Core UoN libraries for authentication and authorisation Basic Authentication ZNetCS.AspNetCore.Authentication.Basic Probably used in conjunction with another Auth backend (e.g. Local or AD) Relational Database ORM Entity Framework Core Use  Code First Migrations Inversion of Control (IoC) / Dependency Injection (DI) Microsoft.Extensions.DependencyInjection Autofac Only when doing more advanced DI that the above can't perform. Scheduled Tasks Hangfire Queued Tasks Hangfire Email sending Mailkit Configures and performs spec compliant email tasks such as sending over SMTP. UoN.AspNetCore.RazorViewRenderer Renders a string as a Razor View, allowing for rich email templating. Error Logging NLog Unit Testing XUnit Moq JSON Newtonsoft.JSON Faceted Search Separate ElasticSearch instance Don't do search itself within .NET - interact with ES instead. Elastic Search.NET - low level client NEST - high level Elastic Search client Object mapping AutoMapper e.g. ViewModels -  DTOs -  Entities or vice versa Reading / writing CSV files CsvHelper", 
            "title": "Technologies by use case"
        }, 
        {
            "location": "/standards/dotnet/fx/approved-technologies/", 
            "text": ".NET Framework is no longer an approved target platform.\n\n\n.NET Core\n should now take precedence.\n\n\nThe \nSenior Developers\n will only approve the use of \n.NET Framework\n for projects that require it.\n\n\n\n\n\n\nApproved Technologies\n\n\nThe Senior Developers have discussed and chosen certain frameworks, libraries and technologies that we prefer to use as a solution for a given need or problem.\n\n\nPlease consult this list when you are looking to solve a problem in your application, to see if we have a preferred way of doing things.\n\n\nThis list can be debated and must evolve, but to see new technologies used or approved, the Senior Developers must be consulted and a case must be made.\n\n\n\n\nTechnologies by use case\n\n\n\n\nThese use cases include\n\n\n\n\napproved technologies\n\n\n\n\n\n\nnotes on optional supporting libraries\n\n\n\n\n\n\nlegacy technologies you might come across, but mustn't use on new apps.\n\n\n\n\n\n\nActive Directory User Authentication\nASP.NET Identity 2.x\nUoN libraries for authentication and authorisation\nLocal User Accounts\nASP.NET Identity 2.x\nEntity Framework 6.x\nUoN libraries for authentication and authorisation\nSQL Server Database ORM\nEntity Framework 6.x\nUse \nCode First Migrations\n for new projects\nNHibernate\nDapper\nInversion of Control (IoC) / Dependency Injection (DI)\nCastle.Windsor 3.x\nUoN libraries for dependency resolution\nScheduled Tasks\nHangfire\nQueued Tasks\nHangfire\nEmail sending\nPostal MVC5\nError Logging\nElmah\nUnit Testing\nNUnit 3.x\nMoq\nNUnit 2.x\nJSON\nNewtonsoft.JSON\nProfiling\nGlimpse\nHas a plugin for Elastic Search too.\nImage Processing\nImageResizer\nSitemaps / Breadcrumbs\nMVC Sitemap\nObject mapping\nAutoMapper\ne.g. ViewModels -\n DTOs -\n Entities or vice versa\nReading / writing CSV files\nCsvHelper", 
            "title": "Approved Technologies"
        }, 
        {
            "location": "/standards/dotnet/fx/approved-technologies/#technologies-by-use-case", 
            "text": "These use cases include   approved technologies    notes on optional supporting libraries    legacy technologies you might come across, but mustn't use on new apps.    Active Directory User Authentication ASP.NET Identity 2.x UoN libraries for authentication and authorisation Local User Accounts ASP.NET Identity 2.x Entity Framework 6.x UoN libraries for authentication and authorisation SQL Server Database ORM Entity Framework 6.x Use  Code First Migrations  for new projects NHibernate Dapper Inversion of Control (IoC) / Dependency Injection (DI) Castle.Windsor 3.x UoN libraries for dependency resolution Scheduled Tasks Hangfire Queued Tasks Hangfire Email sending Postal MVC5 Error Logging Elmah Unit Testing NUnit 3.x Moq NUnit 2.x JSON Newtonsoft.JSON Profiling Glimpse Has a plugin for Elastic Search too. Image Processing ImageResizer Sitemaps / Breadcrumbs MVC Sitemap Object mapping AutoMapper e.g. ViewModels -  DTOs -  Entities or vice versa Reading / writing CSV files CsvHelper", 
            "title": "Technologies by use case"
        }, 
        {
            "location": "/guidelines/recommended-tools/", 
            "text": "Git\n\n\nAs per our \nStandards\n, we use Git for version control.\n\n\nYou are welcome to use any git client you're comfortable with, but we recommend \nGitKraken\n.\n\n\nGitKraken features:\n\n\n\n\nCross-platform (Windows, Mac, Linux)\n\n\nModern\n\n\nSupports Git Flow\n\n\nConnects directly to several Git hosting services, including \nGithub\n\n\n\n\nText Editor\n\n\nWe recommend installing a decent text editor rather than using \nnotepad\n forever.\n\n\nThis is obviously personal preference, but if you're looking for suggestions, the following editors are popular and useful:\n\n\n\n\nVisual Studio Code\n (Windows, Mac, Linux)\n\n\nAtom\n (Windows, Mac, Linux)\n\n\nNotepad++\n (Windows)\n\n\n\n\nREST / HTTP client\n\n\nIf you find yourself needing to test API's, you'll want a client designed to do that.\n\n\n\n\nPostman\n (Windows, Mac, Chrome App)\n\n\nInsomnia\n (Windows, Mac, Linux)", 
            "title": "Recommended Tools"
        }, 
        {
            "location": "/guidelines/recommended-tools/#git", 
            "text": "As per our  Standards , we use Git for version control.  You are welcome to use any git client you're comfortable with, but we recommend  GitKraken .  GitKraken features:   Cross-platform (Windows, Mac, Linux)  Modern  Supports Git Flow  Connects directly to several Git hosting services, including  Github", 
            "title": "Git"
        }, 
        {
            "location": "/guidelines/recommended-tools/#text-editor", 
            "text": "We recommend installing a decent text editor rather than using  notepad  forever.  This is obviously personal preference, but if you're looking for suggestions, the following editors are popular and useful:   Visual Studio Code  (Windows, Mac, Linux)  Atom  (Windows, Mac, Linux)  Notepad++  (Windows)", 
            "title": "Text Editor"
        }, 
        {
            "location": "/guidelines/recommended-tools/#rest-http-client", 
            "text": "If you find yourself needing to test API's, you'll want a client designed to do that.   Postman  (Windows, Mac, Chrome App)  Insomnia  (Windows, Mac, Linux)", 
            "title": "REST / HTTP client"
        }, 
        {
            "location": "/guidelines/packages/", 
            "text": "TODO - this requires more work\n\n\n\n\n\n\nGuide to publishing packages on NuGet\n\n\nGuide to publishing packages on NPM", 
            "title": "Packages"
        }, 
        {
            "location": "/guidelines/dotnet/new-project/", 
            "text": "TODO - VS Code? other OSes?\n\n\n\n\nIn Visual Studio on Windows\n\n\nIf you are looking at creating a .Net Core Web App in Visual Studio, please follow the steps below:\n\n\n\n\n\n\nCreate a new Solution.\n\n\n\n\n\n\nSelect the ASP.Net Core Web Application option. Press next. Make sure you have selected the latest version of .Net Core (currently 2.0 as of 23/02/2018)\n\n\n\n\n\n\nSelect empty - this makes it easier for us to add the standard bits that we need without worrying about introducing unused files.\n\n\n\n\n\n\nFront-end\n\n\nNote that this is only applicable if you have a UI!\nIt is also worth noting that by default, if you did not create an empty project, that VS will use Bower to manage your front end packages. This is no longer recommended as Bower has been deprecated.\n\n\n\n\nTODO: the install node step isn't needed every time - it should be in environment setup\n\n\n\n\n\n\n\n\nInstall node on system : either go to \nhttps://nodejs.org/en/download/\n to install it directly, or if you want to use a command line package manager go to \nhttps://chocolatey.org/\n\n\n\n\n\n\nBy default, VS comes with its own version of node installed, but this is outdated. To use the version you installed on your system, select tools -\n options -\n projects and solutions\n    -\n web package management -\n external web tools and add the location of node (default is \nC:\\Program Files\\nodejs\n). Make sure this is at the top of the list.\n    This only needs to be done once per system install, not project.\n\n\n\n\n\n\nAdd the contents of the \nfrontend\n folder of our \nboilerplate repo\n.\n\n\n\n\n\n\npackage.json\n\n\n\n\ngulpfile.js\n\n\nAdd a new folder to the project called \"js\" and add main.js from the boilerplate\n\n\n\n\nAdd a new folder called \"sass\" add style.scss from boilerplate\n\n\n\n\n\n\nOther classes then need to go into their own folders (Controllers, Services, ViewModels, Entities etc).\n\n\n\n\n\n\nSome current examples of projects which follow our currently defined pattern are:\n\n\n\n\nOwnVehicles\n\n\nDECSYS.Survey\n\n\nSPMIC (revamp branch only)", 
            "title": "Starting a new Project"
        }, 
        {
            "location": "/guidelines/dotnet/new-project/#in-visual-studio-on-windows", 
            "text": "If you are looking at creating a .Net Core Web App in Visual Studio, please follow the steps below:    Create a new Solution.    Select the ASP.Net Core Web Application option. Press next. Make sure you have selected the latest version of .Net Core (currently 2.0 as of 23/02/2018)    Select empty - this makes it easier for us to add the standard bits that we need without worrying about introducing unused files.", 
            "title": "In Visual Studio on Windows"
        }, 
        {
            "location": "/guidelines/dotnet/new-project/#front-end", 
            "text": "Note that this is only applicable if you have a UI!\nIt is also worth noting that by default, if you did not create an empty project, that VS will use Bower to manage your front end packages. This is no longer recommended as Bower has been deprecated.   TODO: the install node step isn't needed every time - it should be in environment setup     Install node on system : either go to  https://nodejs.org/en/download/  to install it directly, or if you want to use a command line package manager go to  https://chocolatey.org/    By default, VS comes with its own version of node installed, but this is outdated. To use the version you installed on your system, select tools -  options -  projects and solutions\n    -  web package management -  external web tools and add the location of node (default is  C:\\Program Files\\nodejs ). Make sure this is at the top of the list.\n    This only needs to be done once per system install, not project.    Add the contents of the  frontend  folder of our  boilerplate repo .    package.json   gulpfile.js  Add a new folder to the project called \"js\" and add main.js from the boilerplate   Add a new folder called \"sass\" add style.scss from boilerplate    Other classes then need to go into their own folders (Controllers, Services, ViewModels, Entities etc).    Some current examples of projects which follow our currently defined pattern are:   OwnVehicles  DECSYS.Survey  SPMIC (revamp branch only)", 
            "title": "Front-end"
        }, 
        {
            "location": "/guidelines/dotnet/fx-environment-setup/", 
            "text": "Legacy Applications developed on Windows only\n\n\n\n\nYou'll want to install the following:\n\n\n\n\nThe latest stable \nVisual Studio\n\n\nEnterprise edition\n\n\nLicensing (MSDN)\n\n\nYou should have a MSDN Visual Studio Enterprise subscription - speak to a Team Lead for details\n\n\n\n\n\n\nJetbrains Resharper (requires licensing - speak to a Senior Developer)\n\n\nOptional\n The latest stable \nSQL Server Management Studio\n (Current GA release)\n\n\n\n\n\n\nTODO - Guidance on what Visual Studio components to install\n\n\n\n\nYou may find when you work on older applications you need earlier versions of Visual Studio, but we recommend installing these only when required.\n\n\nYou may also wish to install preview versions of .NET tooling, such as Visual Studio betas or release candidates, or previews of SSMS.\nThis is fine, but be cautious using preview versions, and always have the latest stable version installed as well.", 
            "title": ".NET Framework Environment Setup"
        }, 
        {
            "location": "/guidelines/vsts-scrum/", 
            "text": "Using Visual Studio Team Services for Agile (SCRUM) Development\n\n\nThis documentation is intended to help guide and support the use of VSTS and SCRUM at UoN \n\n\nSCRUM Guide\n\n\nAnyone involved in SCRUM should be aware of the contents and ideas contained within the SCRUM Guides.  Please click \nhere\n for a download  \n\n\nSCRUM Presentation\n\n\nHere's a Powerpoint presentation on SCRUM\n\nHope it's useful\n\nPlease click \nhere\n for a download  \n\n\nMicrosoft Excel Integration\n\n\nVSTS can happily co-exist with Excel - if the 'Teams' menu does not appear on your ribbon, install VS Team Explorer from \nhere\n and the 'team' tab appeared in Excel", 
            "title": "Overview"
        }, 
        {
            "location": "/guidelines/vsts-scrum/#using-visual-studio-team-services-for-agile-scrum-development", 
            "text": "This documentation is intended to help guide and support the use of VSTS and SCRUM at UoN", 
            "title": "Using Visual Studio Team Services for Agile (SCRUM) Development"
        }, 
        {
            "location": "/guidelines/vsts-scrum/#scrum-guide", 
            "text": "Anyone involved in SCRUM should be aware of the contents and ideas contained within the SCRUM Guides.  Please click  here  for a download", 
            "title": "SCRUM Guide"
        }, 
        {
            "location": "/guidelines/vsts-scrum/#scrum-presentation", 
            "text": "Here's a Powerpoint presentation on SCRUM \nHope it's useful \nPlease click  here  for a download", 
            "title": "SCRUM Presentation"
        }, 
        {
            "location": "/guidelines/vsts-scrum/#microsoft-excel-integration", 
            "text": "VSTS can happily co-exist with Excel - if the 'Teams' menu does not appear on your ribbon, install VS Team Explorer from  here  and the 'team' tab appeared in Excel", 
            "title": "Microsoft Excel Integration"
        }, 
        {
            "location": "/guidelines/vsts-scrum/glossary/", 
            "text": "Glossary\n\n\nThis glossary defines key terms that are used in AGILE (SCRUM)  \n\n\nTFS \u2013 Team Foundation Server\n\nVSTS - Visual Studio Team Services\n\nPBI \u2013 Product Backlog Item\n\nDOD \u2013 definition of done\n\nCI - Continuous Integration\n\nWIT \u2013 Work Item Type\n\nPBR \u2013 Product Backlog Refinement\n\nPBI \u2013 Product Backlog Item \nALM \u2013 Application Lifecycle Management", 
            "title": "Glossary"
        }, 
        {
            "location": "/guidelines/vsts-scrum/glossary/#glossary", 
            "text": "This glossary defines key terms that are used in AGILE (SCRUM)    TFS \u2013 Team Foundation Server \nVSTS - Visual Studio Team Services \nPBI \u2013 Product Backlog Item \nDOD \u2013 definition of done \nCI - Continuous Integration \nWIT \u2013 Work Item Type \nPBR \u2013 Product Backlog Refinement \nPBI \u2013 Product Backlog Item \nALM \u2013 Application Lifecycle Management", 
            "title": "Glossary"
        }, 
        {
            "location": "/guidelines/vsts-scrum/scrum/", 
            "text": "SCRUM Process and Guides\n\n\nIntroduction\n\n\nThis document will provide the guidance, process flow and meetings involved to successfully develop and project manage using AGILE (SCRUM) methodology.  \n\n\nPre-Reading\n\n\nAny colleagues using the AGILE (SCRUM) methodology should watch these videos (\nhere\n and \nhere\n) and further reading is available on \nhttps://www.scrum.org\n and \nhttp://www.scrumguides.org\n\n\nVisual Studio Team Services (VSTS)\n\n\nThe Application Lifecycle Management tool of choice is Visual Studio Team Services (VSTS) using the UoN SCRUM (v1.0) process template.   VSTS web access can be accessed here; \nhttps://universityofnottingham.visualstudio.com\n.  \n\n\nRoles and Responsibilities\n\n\nWithin SCRUM, there are 3 key roles.  Described below is the summary of responsibly for these roles.  Further reading can be found online. \n\n\nScrum Master\n\n\nThis role ensures that the values of Scrum are upheld. They would mentor all roles and members of the team on the objectives of Scrum and the best way to achieve the right outcome.  They organise and facilitate all the meetings, as well as take notes and feedback to the team any outcomes.  They are responsible for the maintenance of the capacity planning, task board and burn down.  This role closest matches that of a Business Analyst. \n\n\nProduct Owner\n\n\nThis role is key to delivering the project to time and cost.  This role is akin to the classic Project Manager role.  They are the only interface between the stakeholders and the scrum team and should act as a buffer between the two.  They will understand the vision of the stakeholder and be able to share with the scrum team and guide all key non-technical decision.  The PO should prioritise the Product Backlog and ensure that it has all the detail needed for the scrum team to make it a success.  \n\n\nScrum (Development) Team\n\n\nThese are the team members responsible for setting and achieving the deliverables within an agreed sprint window.  They should, with the PO, agree the PBIs that can be completed within a sprint.  They should breakdown Product Backlog Items (PBIs) into tasks that must be achieved within a sprint window.   This team would be multifunctional and be able to demonstrate the outputs from the sprint at the end during the Sprint Retrospective.  \n\n\nMeeting Structure\n\n\nSCRUM process dictates a number of meetings should be held.\n\nThese are as follows; \n\n\nProduct Backlog Refinement (Grooming)\n\n\nWho: Entire team\n\nWhen: Mid sprint\n\nLength: 4 hours (time-boxed)  \n\n\nThis will inform our target backlog for the next sprint and should make the subsequent sprint planning session run a lot smoother. PBR sessions are typically lead by the PO.  \n\n\nAgenda as follows:\n\n\n\n\nEnsure product backlog is in correct priority order in conjunction with the Product Owner (PO)  \n\n\nMake sure that PBIs that can be worked on by the team are marked as \u201cApproved\u201d  \n\n\nTake each product backlog item / bug and update it with any new information we have. This includes updating the following:  \n\n\nThe PBI title  \n\n\nDescription  \n\n\nAcceptance criteria  \n\n\nAny supporting diagrams / attachments  \n\n\nExample data  \n\n\nTest cases  \n\n\nCreation of bucket-tasks for PBIs to speed up next sprint planning session  \n\n\n\n\n\n\nScore PBI\u2019s effort (SCRUM poker)  \n\n\nBreak down any PBI\u2019s that are too large  \n\n\nReview PBIs with completed tasks but not yet marked as \u201cDone\u201d  \n\n\nGeneral housekeeping \u2013 make sure PBIs/Bugs have someone assigned and that none have fallen between the cracks  \n\n\n\n\nSprint Planning\n\n\nWho: Entire team\n\nWhen: Mid sprint\n\nLength: 8 hours (time-boxed)  \n\n\nThis session should last no more than 1\u00bd hours for a SCRUM team of 3 - but can be upto a full day for a larger SCRUM team.  \n\n\nThe meeting ends with the teams tasking-out in their own areas back at their desks if not completed in the meeting.  \n\n\nAgenda as follows:\n\n\n\n\nReview retrospective action plan agreed  \n\n\nSet our capacity, taking into account any planned leave / other project conflicts  \n\n\nReview as a team the product backlog and make any small priority amends (note that the priority should have been set by the PO prior to this meeting)  \n\n\nAgree as a team the target product backlog items to be moved to the next sprint based on a sensible velocity taken from previous sprints / experience  \n\n\nClarify PBIs where anyone feels the requirements aren\u2019t clear enough  \n\n\n\n\nDaily Scrum (The Stand-Up)\n\n\nWho: Development team\n\nWhen: Daily at the same time\n\nLength: 15 mintes (time-boxed)  \n\n\nYou don\u2019t need a room for this, but there should be a single place where everyone is agreed and can meet every morning to complete.  Observers are welcomed in a 'chicken\u2019 capacity. \nGo around in a circle with 3 simple questions. \n\n\nAgenda as follows:\n\n\n\n\nWhat did you do yesterday  \n\n\nWhat are you going to do today  \n\n\nAnything blocking you from completing the task  \n\n\n\n\nImportant to note that the SCRUM should be quick, simple and any blockers (or points of note), should be taken off-line by the PO to talk about after.  Having lengthy conversations at this stage results in developers being in SCRUMS for 30 minutes whereby most of the group will have no influence (or care) on the outcome.\n\n\nSprint Retrospective\n\n\nWho: Entire team\n\nWhen: End of Sprint\n\nLength: 1 hour  \n\n\nAgenda as follows:\n\n\n\n\nReview this burndown against previous  \n\n\nWhat went well / didn\u2019t go well  \n\n\nVote on which of the things that didn\u2019t go well we\u2019d like to change? 3 votes each.  \n\n\nAgree action plan to fix the favourite. Plan to include What/How/Who will do it.  \n\n\n\n\nSample Meeting Timeline\n\n\nBelow is a timeline indicative of using the above AGILE (SCRUM) meetings process during a 10 day (2 week) sprint.  \n\n\n\n\n\n\n\n\nWeek 1\n\n\nDay 1\n\n\nDay 2\n\n\nDay 3\n\n\nDay 4\n\n\nDay 5\n\n\n\n\n\n\n\n\n\n\nAM\n\n\nSprint Planning\n\n\nStand-Up\n\n\nStand-Up\n\n\nStand-Up\n\n\nStand-Up\n\n\n\n\n\n\n---\n\n\n---\n\n\n---\n\n\n---\n\n\n---\n\n\n---\n\n\n\n\n\n\nWeek 2\n\n\nDay 6\n\n\nDay 7\n\n\nDay 8\n\n\nDay 9\n\n\nDay 10\n\n\n\n\n\n\nAM\n\n\nStand-Up\n\n\nStand-Up\n\n\nStand-Up\n\n\nStand-Up\n\n\nStand-Up\n\n\n\n\n\n\nPM\n\n\n\n\nBacklog Refinement\n\n\n\n\n\n\nSprint Demo/Retro", 
            "title": "SCRUM"
        }, 
        {
            "location": "/guidelines/vsts-scrum/scrum/#scrum-process-and-guides", 
            "text": "", 
            "title": "SCRUM Process and Guides"
        }, 
        {
            "location": "/guidelines/vsts-scrum/scrum/#introduction", 
            "text": "This document will provide the guidance, process flow and meetings involved to successfully develop and project manage using AGILE (SCRUM) methodology.", 
            "title": "Introduction"
        }, 
        {
            "location": "/guidelines/vsts-scrum/scrum/#pre-reading", 
            "text": "Any colleagues using the AGILE (SCRUM) methodology should watch these videos ( here  and  here ) and further reading is available on  https://www.scrum.org  and  http://www.scrumguides.org", 
            "title": "Pre-Reading"
        }, 
        {
            "location": "/guidelines/vsts-scrum/scrum/#visual-studio-team-services-vsts", 
            "text": "The Application Lifecycle Management tool of choice is Visual Studio Team Services (VSTS) using the UoN SCRUM (v1.0) process template.   VSTS web access can be accessed here;  https://universityofnottingham.visualstudio.com .", 
            "title": "Visual Studio Team Services (VSTS)"
        }, 
        {
            "location": "/guidelines/vsts-scrum/scrum/#roles-and-responsibilities", 
            "text": "Within SCRUM, there are 3 key roles.  Described below is the summary of responsibly for these roles.  Further reading can be found online.", 
            "title": "Roles and Responsibilities"
        }, 
        {
            "location": "/guidelines/vsts-scrum/scrum/#scrum-master", 
            "text": "This role ensures that the values of Scrum are upheld. They would mentor all roles and members of the team on the objectives of Scrum and the best way to achieve the right outcome.  They organise and facilitate all the meetings, as well as take notes and feedback to the team any outcomes.  They are responsible for the maintenance of the capacity planning, task board and burn down.  This role closest matches that of a Business Analyst.", 
            "title": "Scrum Master"
        }, 
        {
            "location": "/guidelines/vsts-scrum/scrum/#product-owner", 
            "text": "This role is key to delivering the project to time and cost.  This role is akin to the classic Project Manager role.  They are the only interface between the stakeholders and the scrum team and should act as a buffer between the two.  They will understand the vision of the stakeholder and be able to share with the scrum team and guide all key non-technical decision.  The PO should prioritise the Product Backlog and ensure that it has all the detail needed for the scrum team to make it a success.", 
            "title": "Product Owner"
        }, 
        {
            "location": "/guidelines/vsts-scrum/scrum/#scrum-development-team", 
            "text": "These are the team members responsible for setting and achieving the deliverables within an agreed sprint window.  They should, with the PO, agree the PBIs that can be completed within a sprint.  They should breakdown Product Backlog Items (PBIs) into tasks that must be achieved within a sprint window.   This team would be multifunctional and be able to demonstrate the outputs from the sprint at the end during the Sprint Retrospective.", 
            "title": "Scrum (Development) Team"
        }, 
        {
            "location": "/guidelines/vsts-scrum/scrum/#meeting-structure", 
            "text": "SCRUM process dictates a number of meetings should be held. \nThese are as follows;", 
            "title": "Meeting Structure"
        }, 
        {
            "location": "/guidelines/vsts-scrum/scrum/#product-backlog-refinement-grooming", 
            "text": "Who: Entire team \nWhen: Mid sprint \nLength: 4 hours (time-boxed)    This will inform our target backlog for the next sprint and should make the subsequent sprint planning session run a lot smoother. PBR sessions are typically lead by the PO.    Agenda as follows:   Ensure product backlog is in correct priority order in conjunction with the Product Owner (PO)    Make sure that PBIs that can be worked on by the team are marked as \u201cApproved\u201d    Take each product backlog item / bug and update it with any new information we have. This includes updating the following:    The PBI title    Description    Acceptance criteria    Any supporting diagrams / attachments    Example data    Test cases    Creation of bucket-tasks for PBIs to speed up next sprint planning session      Score PBI\u2019s effort (SCRUM poker)    Break down any PBI\u2019s that are too large    Review PBIs with completed tasks but not yet marked as \u201cDone\u201d    General housekeeping \u2013 make sure PBIs/Bugs have someone assigned and that none have fallen between the cracks", 
            "title": "Product Backlog Refinement (Grooming)"
        }, 
        {
            "location": "/guidelines/vsts-scrum/scrum/#sprint-planning", 
            "text": "Who: Entire team \nWhen: Mid sprint \nLength: 8 hours (time-boxed)    This session should last no more than 1\u00bd hours for a SCRUM team of 3 - but can be upto a full day for a larger SCRUM team.    The meeting ends with the teams tasking-out in their own areas back at their desks if not completed in the meeting.    Agenda as follows:   Review retrospective action plan agreed    Set our capacity, taking into account any planned leave / other project conflicts    Review as a team the product backlog and make any small priority amends (note that the priority should have been set by the PO prior to this meeting)    Agree as a team the target product backlog items to be moved to the next sprint based on a sensible velocity taken from previous sprints / experience    Clarify PBIs where anyone feels the requirements aren\u2019t clear enough", 
            "title": "Sprint Planning"
        }, 
        {
            "location": "/guidelines/vsts-scrum/scrum/#daily-scrum-the-stand-up", 
            "text": "Who: Development team \nWhen: Daily at the same time \nLength: 15 mintes (time-boxed)    You don\u2019t need a room for this, but there should be a single place where everyone is agreed and can meet every morning to complete.  Observers are welcomed in a 'chicken\u2019 capacity. \nGo around in a circle with 3 simple questions.   Agenda as follows:   What did you do yesterday    What are you going to do today    Anything blocking you from completing the task     Important to note that the SCRUM should be quick, simple and any blockers (or points of note), should be taken off-line by the PO to talk about after.  Having lengthy conversations at this stage results in developers being in SCRUMS for 30 minutes whereby most of the group will have no influence (or care) on the outcome.", 
            "title": "Daily Scrum (The Stand-Up)"
        }, 
        {
            "location": "/guidelines/vsts-scrum/scrum/#sprint-retrospective", 
            "text": "Who: Entire team \nWhen: End of Sprint \nLength: 1 hour    Agenda as follows:   Review this burndown against previous    What went well / didn\u2019t go well    Vote on which of the things that didn\u2019t go well we\u2019d like to change? 3 votes each.    Agree action plan to fix the favourite. Plan to include What/How/Who will do it.", 
            "title": "Sprint Retrospective"
        }, 
        {
            "location": "/guidelines/vsts-scrum/scrum/#sample-meeting-timeline", 
            "text": "Below is a timeline indicative of using the above AGILE (SCRUM) meetings process during a 10 day (2 week) sprint.       Week 1  Day 1  Day 2  Day 3  Day 4  Day 5      AM  Sprint Planning  Stand-Up  Stand-Up  Stand-Up  Stand-Up    ---  ---  ---  ---  ---  ---    Week 2  Day 6  Day 7  Day 8  Day 9  Day 10    AM  Stand-Up  Stand-Up  Stand-Up  Stand-Up  Stand-Up    PM   Backlog Refinement    Sprint Demo/Retro", 
            "title": "Sample Meeting Timeline"
        }, 
        {
            "location": "/guidelines/vsts-scrum/definition-of-done/", 
            "text": "Definition of Done\n\n\nKey to SCRUM teams is to have a clear Definition of Done \u2013 or DOD. \n\n\nIt highlights the criteria that has to be met in order for a Product Backlog Item be marked as \u2018Done\u2019. Before any project starts, the DOD must be agreed by the Scrum Team (including Product Owner).  \n\n\nThe team should take the 5 compulsory DOD items and pick a minimum of 3 optional.   \n\n\nCompulsory DOD Items\n\n\n\n\nAcceptance Criteria of Product Owner are met   \n\n\nVSTS updated - remaining hours for task(s) set to 0 and all sub-task(s) are closed  \n\n\nCode is commented and checked in source control  \n\n\nCode is Unit Tested  \n\n\nPeer reviewed and meets development coding standards  \n\n\n\n\nOptional DOD Items\n\n\n\n\nFunctional Documentation ready  \n\n\nUnit tests written and passing  \n\n\nDeployed to Test Environment  \n\n\nPassed UAT (User Acceptance Testing) and signed off as meeting requirements  \n\n\nComponent design created  \n\n\nBuilds without errors  \n\n\nNFR\u2019s validated  \n\n\nRelease candidate built", 
            "title": "Definition of Done"
        }, 
        {
            "location": "/guidelines/vsts-scrum/definition-of-done/#definition-of-done", 
            "text": "Key to SCRUM teams is to have a clear Definition of Done \u2013 or DOD.   It highlights the criteria that has to be met in order for a Product Backlog Item be marked as \u2018Done\u2019. Before any project starts, the DOD must be agreed by the Scrum Team (including Product Owner).    The team should take the 5 compulsory DOD items and pick a minimum of 3 optional.", 
            "title": "Definition of Done"
        }, 
        {
            "location": "/guidelines/vsts-scrum/definition-of-done/#compulsory-dod-items", 
            "text": "Acceptance Criteria of Product Owner are met     VSTS updated - remaining hours for task(s) set to 0 and all sub-task(s) are closed    Code is commented and checked in source control    Code is Unit Tested    Peer reviewed and meets development coding standards", 
            "title": "Compulsory DOD Items"
        }, 
        {
            "location": "/guidelines/vsts-scrum/definition-of-done/#optional-dod-items", 
            "text": "Functional Documentation ready    Unit tests written and passing    Deployed to Test Environment    Passed UAT (User Acceptance Testing) and signed off as meeting requirements    Component design created    Builds without errors    NFR\u2019s validated    Release candidate built", 
            "title": "Optional DOD Items"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts/", 
            "text": "VSTS Setup and Usages\n\n\nIntroduction\n\n\nThis document is intended to be used by University of Nottingham's Development Teams migrating to TFS for use of Task Management and, in a later phase, Source Code Management (SCM).   These guidelines are industry standards and should be followed by everyone in the development team to develop a vision and sustainable approach by which the University of Nottingham can prioritise IT investments that fuel business growth. \nVSTS web access can be accessed here; \nhttps://universityofnottingham.visualstudio.com\n.\n\n\nProject and Collection Architecture\n\n\nWe will utilse Microsoft's offering of using Team Services, which can host all of the server-side aspects of VSTS. Our work items and team features are all hosted in the cloud - and we'll look to migrate source code and build configurations in later phases. \n\n\nFrom an architectural point of view, this greatly simplifies your use of VSTS, as the only aspects of the architecture we need to consider are the client components and their Internet access.  As for licences, all developers are covered as they use an MSDN.  Licences are disucssed further later in this document.\n\n\nWhen using the Team Services, you use a web browser to connect to the service using your Microsoft account. You can create team projects, add members to your team, and work as you would with a locally installed TFS, without the overhead of administering the servers. Team Services hosts your application tier, data tier, and build servers in the cloud.\n\n\n\n\nSCRUM Template\n\n\nThe University of Nottingham will use a single SCRUM template slightly modified for reporting purposes.\n\nThis is the UoN SCRUM (v1.0) process template. \n\n\nTeams\n\n\nInside a project, there can be a number of teams. These can be used to segment the work item backlog for the various projects.\n\n\nFor the purpose of University of Nottingham, each internal 'Project' will equate to a VSTS 'Team' and hence each University of Nottingham Project will be given its own iteration backlog, and any release/milestone/sprint sub iterations required.\n\n\nAny given project, whether it uses a single system or has cross cutting concerns, can be setup as a VSTS Team with its own backlog and sprint iterations.\n\n\nA hierarchy of Teams can be created, so each University of Nottingham project could potentially have many teams each with their own Product Backlog, then roll-up into the parent team for that sub-project like Mobile, Integration, etc\n\n\nThese 'Projects' should only be created by the \nProject Workstream Lead\n identified during the Project initialisation phase. \n\n\nSee 'Setting up projects' section for further details\n\n\nSecurity and Privileges\n\n\nAccess Rights on VSTS\n\n\nWork Item Tracking\n\n\n\n\n\n\n\n\n\n\nFree users \n (access level: Stakeholder)\n\n\nTeam Services users \n  (access level: Basic)\n\n\n\n\n\n\n\n\n\n\nCreate and edit work items, including bugs, requirements , and tasks\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\nSearch and query work items\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\nView backlogs and boards\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\nProvide feedback\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\nRequest feedback\n\n\n\n\n\u2714\n\n\n\n\n\n\nAgile tools (Kanban boards, backlogs, sprint planning, portfolio management)\n\n\n\n\n\u2714\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\n\n\n\n\nFree users \n (access level: Stakeholder)\n\n\nTeam Services users \n  (access level: Basic)\n\n\n\n\n\n\n\n\n\n\nUnlimited private Git repositories\n\n\n\n\n\u2714\n\n\n\n\n\n\nConnect to your code using Xcode, Eclipse, IntelliJ, Android Studio, Visual Studio, Visual Studio Code, and more\n\n\n\n\n\u2714\n\n\n\n\n\n\nCentralized version control with TFVC, including Code Review\n\n\n\n\n\u2714\n\n\n\n\n\n\nPowerful semantic code search\n\n\n\n\n\u2714\n\n\n\n\n\n\nBuild and release\n\n\n\n\n\u2714\n\n\n\n\n\n\nContinuous deployment with Release Management\n\n\n\n\n\u2714\n\n\n\n\n\n\nApprove releases\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\nPackage Management\n\n\n\n\n\u2714\n\n\n\n\n\n\n\n\nTest\n\n\n\n\n\n\n\n\n\n\nFree users \n (access level: Stakeholder)\n\n\nTeam Services users \n  (access level: Basic)\n\n\n\n\n\n\n\n\n\n\nExploratory testing\n\n\n\n\n\u2714\n\n\n\n\n\n\nTest Manager (purchased separately)\n\n\n\n\n\u2714\n\n\n\n\n\n\n\n\nOther features\n\n\n\n\n\n\n\n\n\n\nFree users \n (access level: Stakeholder)\n\n\nTeam Services users \n  (access level: Basic)\n\n\n\n\n\n\n\n\n\n\nView charts, widgets, and dashboards\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\nCreate charts, configure widgets, and set up dashboards\n\n\n\n\n\u2714\n\n\n\n\n\n\n\n\nStakeholder\n\n\nThis will be the default access right for anyone not registered as a user on VSTS. \nAll Business Users including Project Managers and BAs will have stakeholder access. \nWith Stakeholder access, users can create and modify all work items, and can create and save queries on all work items under their My Queries folder.\n\n\nBasic\n\n\nDevelopers will have basic access that allows them to manage work items and use Kanban board\nAnyone upgraded to Basic access should have a valid MSDN License\n\n\nAccess rights on Projects\n\n\nTeam Members working on a specific project or work package will be added to the Project Team by the Workstream Lead. They will then have ability to work on work items and track the progress.\nSee 'Project setup and admin' section for further details.", 
            "title": "VSTS"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts/#vsts-setup-and-usages", 
            "text": "", 
            "title": "VSTS Setup and Usages"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts/#introduction", 
            "text": "This document is intended to be used by University of Nottingham's Development Teams migrating to TFS for use of Task Management and, in a later phase, Source Code Management (SCM).   These guidelines are industry standards and should be followed by everyone in the development team to develop a vision and sustainable approach by which the University of Nottingham can prioritise IT investments that fuel business growth. \nVSTS web access can be accessed here;  https://universityofnottingham.visualstudio.com .", 
            "title": "Introduction"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts/#project-and-collection-architecture", 
            "text": "We will utilse Microsoft's offering of using Team Services, which can host all of the server-side aspects of VSTS. Our work items and team features are all hosted in the cloud - and we'll look to migrate source code and build configurations in later phases.   From an architectural point of view, this greatly simplifies your use of VSTS, as the only aspects of the architecture we need to consider are the client components and their Internet access.  As for licences, all developers are covered as they use an MSDN.  Licences are disucssed further later in this document.  When using the Team Services, you use a web browser to connect to the service using your Microsoft account. You can create team projects, add members to your team, and work as you would with a locally installed TFS, without the overhead of administering the servers. Team Services hosts your application tier, data tier, and build servers in the cloud.", 
            "title": "Project and Collection Architecture"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts/#scrum-template", 
            "text": "The University of Nottingham will use a single SCRUM template slightly modified for reporting purposes. \nThis is the UoN SCRUM (v1.0) process template.", 
            "title": "SCRUM Template"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts/#teams", 
            "text": "Inside a project, there can be a number of teams. These can be used to segment the work item backlog for the various projects.  For the purpose of University of Nottingham, each internal 'Project' will equate to a VSTS 'Team' and hence each University of Nottingham Project will be given its own iteration backlog, and any release/milestone/sprint sub iterations required.  Any given project, whether it uses a single system or has cross cutting concerns, can be setup as a VSTS Team with its own backlog and sprint iterations.  A hierarchy of Teams can be created, so each University of Nottingham project could potentially have many teams each with their own Product Backlog, then roll-up into the parent team for that sub-project like Mobile, Integration, etc  These 'Projects' should only be created by the  Project Workstream Lead  identified during the Project initialisation phase.   See 'Setting up projects' section for further details", 
            "title": "Teams"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts/#security-and-privileges", 
            "text": "", 
            "title": "Security and Privileges"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts/#access-rights-on-vsts", 
            "text": "", 
            "title": "Access Rights on VSTS"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts/#work-item-tracking", 
            "text": "Free users   (access level: Stakeholder)  Team Services users    (access level: Basic)      Create and edit work items, including bugs, requirements , and tasks  \u2714  \u2714    Search and query work items  \u2714  \u2714    View backlogs and boards  \u2714  \u2714    Provide feedback  \u2714  \u2714    Request feedback   \u2714    Agile tools (Kanban boards, backlogs, sprint planning, portfolio management)   \u2714", 
            "title": "Work Item Tracking"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts/#code", 
            "text": "Free users   (access level: Stakeholder)  Team Services users    (access level: Basic)      Unlimited private Git repositories   \u2714    Connect to your code using Xcode, Eclipse, IntelliJ, Android Studio, Visual Studio, Visual Studio Code, and more   \u2714    Centralized version control with TFVC, including Code Review   \u2714    Powerful semantic code search   \u2714    Build and release   \u2714    Continuous deployment with Release Management   \u2714    Approve releases  \u2714  \u2714    Package Management   \u2714", 
            "title": "Code"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts/#test", 
            "text": "Free users   (access level: Stakeholder)  Team Services users    (access level: Basic)      Exploratory testing   \u2714    Test Manager (purchased separately)   \u2714", 
            "title": "Test"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts/#other-features", 
            "text": "Free users   (access level: Stakeholder)  Team Services users    (access level: Basic)      View charts, widgets, and dashboards  \u2714  \u2714    Create charts, configure widgets, and set up dashboards   \u2714", 
            "title": "Other features"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts/#stakeholder", 
            "text": "This will be the default access right for anyone not registered as a user on VSTS. \nAll Business Users including Project Managers and BAs will have stakeholder access. \nWith Stakeholder access, users can create and modify all work items, and can create and save queries on all work items under their My Queries folder.", 
            "title": "Stakeholder"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts/#basic", 
            "text": "Developers will have basic access that allows them to manage work items and use Kanban board\nAnyone upgraded to Basic access should have a valid MSDN License", 
            "title": "Basic"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts/#access-rights-on-projects", 
            "text": "Team Members working on a specific project or work package will be added to the Project Team by the Workstream Lead. They will then have ability to work on work items and track the progress.\nSee 'Project setup and admin' section for further details.", 
            "title": "Access rights on Projects"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts-setup/", 
            "text": "VSTS Workstream Setup (Teams) and General Admin\n\n\nIn order to cross-report, move items between teams and for ease of setup; all UoN workstreams are completed within the same 'project' - namely 'ProductCentre.Main'. \n\n\nWhy?\n\nRead \n\nthis\n and then \nthis\n\n\nSetup a Backlog\n\n\nAs all teams are hanging off the same project, you'll need to setup a backlog for the team under the ProductCentre.Main iteration.\n\nClick here; \nhttps://universityofnottingham.visualstudio.com/ProductCentre.Main/_admin/_Work?_a=iterations\n\n\nRight click on ProductCentre.Main and select 'Add Child'.\n\n\n \n\n\nGive your iteration a meaningful name ensuring it ends with the word 'backlog' - again, this is important later in the process to be able to identify the difference between a backlog and an area. \n\n\n \n\n\nSetup Sprints (Iterations)\n\n\nFinally, we can start adding sprints.  Again, right click on the newly created backlog, and 'New Child'.\n\n\n \n\n\nStart adding your sprints as required. \n\n\n \n\n\nSetting up teams\n\n\nWe utilise the VSTS 'Team' setup in order to manage and run our projects.  Each 'team' will have its own backlog, kanban and time tracking area and should be setup when a new 'project' is starting. \nFrom with \nProductCentre.Main\n, click the access menu and select 'New Team' \n\n \n\n\nComplete the 'Create new team' information page and click 'Create team' when ready - \n\n \n\n\nYou'll then be redirected to the newly created area specifically for your team.  \n\n\nAdding Team Members\n\n\nNext, you'll need to add team members to the project.  Adding the team in here is important for a couple of reasons.  Besides the obvious, to show who's on the project, but it's to speed up the assigning of tasks at a later point and, in the case of non-Product Centre users, to give them access rights to view the detail within.  \n\n\nFrom the menu ribbon, click the cog.  This will open the 'Overview' page.  Then, select the 'Add...' option and begin to build your team. \n\n \n\n\n \n\n\nLocalisation\n\n\nIf your VSTS is appearing with American datetime settings, click on your initials or profile image in the top right of VSTS and select 'My Profile'.\n\n\n \n\n\nOn the next screen, select the 'Edit Profile' option.\n\n\n \n\n\nFinally, click 'Preferences' and change the date pattern and time zone as required.\n\n\n \n\n\nSetup Project - which you shouldn't do\n\n\nFor completness, this is how you setup a new project... which you shouldn't... but this is how: \n\n\nNew projects are setup from the admin page.\n\nDirect link is: \nhttps://universityofnottingham.visualstudio.com/_projects?_a=new\n.\n\n\nOnce you've given the new project a title and description, click Create; \n\n \n\n\nA project area is created by default and associated with the project.  The workstream lead creating the project automatically becomes a member of the project - however additional members will need to be added.\n\n\nFrom the cog icon at the top, select 'Default Team Settings'\n\n\n \n\n\nThen, build up your team by selecting 'Add', type in the surname of the team members, select them, and finally click 'Save Changes'.", 
            "title": "VSTS Setup"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts-setup/#vsts-workstream-setup-teams-and-general-admin", 
            "text": "In order to cross-report, move items between teams and for ease of setup; all UoN workstreams are completed within the same 'project' - namely 'ProductCentre.Main'.   Why? \nRead  this  and then  this", 
            "title": "VSTS Workstream Setup (Teams) and General Admin"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts-setup/#setup-a-backlog", 
            "text": "As all teams are hanging off the same project, you'll need to setup a backlog for the team under the ProductCentre.Main iteration. \nClick here;  https://universityofnottingham.visualstudio.com/ProductCentre.Main/_admin/_Work?_a=iterations  Right click on ProductCentre.Main and select 'Add Child'.     Give your iteration a meaningful name ensuring it ends with the word 'backlog' - again, this is important later in the process to be able to identify the difference between a backlog and an area.", 
            "title": "Setup a Backlog"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts-setup/#setup-sprints-iterations", 
            "text": "Finally, we can start adding sprints.  Again, right click on the newly created backlog, and 'New Child'.     Start adding your sprints as required.", 
            "title": "Setup Sprints (Iterations)"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts-setup/#setting-up-teams", 
            "text": "We utilise the VSTS 'Team' setup in order to manage and run our projects.  Each 'team' will have its own backlog, kanban and time tracking area and should be setup when a new 'project' is starting. \nFrom with  ProductCentre.Main , click the access menu and select 'New Team'     Complete the 'Create new team' information page and click 'Create team' when ready -     You'll then be redirected to the newly created area specifically for your team.", 
            "title": "Setting up teams"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts-setup/#adding-team-members", 
            "text": "Next, you'll need to add team members to the project.  Adding the team in here is important for a couple of reasons.  Besides the obvious, to show who's on the project, but it's to speed up the assigning of tasks at a later point and, in the case of non-Product Centre users, to give them access rights to view the detail within.    From the menu ribbon, click the cog.  This will open the 'Overview' page.  Then, select the 'Add...' option and begin to build your team.", 
            "title": "Adding Team Members"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts-setup/#localisation", 
            "text": "If your VSTS is appearing with American datetime settings, click on your initials or profile image in the top right of VSTS and select 'My Profile'.     On the next screen, select the 'Edit Profile' option.     Finally, click 'Preferences' and change the date pattern and time zone as required.", 
            "title": "Localisation"
        }, 
        {
            "location": "/guidelines/vsts-scrum/vsts-setup/#setup-project-which-you-shouldnt-do", 
            "text": "For completness, this is how you setup a new project... which you shouldn't... but this is how:   New projects are setup from the admin page. \nDirect link is:  https://universityofnottingham.visualstudio.com/_projects?_a=new .  Once you've given the new project a title and description, click Create;     A project area is created by default and associated with the project.  The workstream lead creating the project automatically becomes a member of the project - however additional members will need to be added.  From the cog icon at the top, select 'Default Team Settings'     Then, build up your team by selecting 'Add', type in the surname of the team members, select them, and finally click 'Save Changes'.", 
            "title": "Setup Project - which you shouldn't do"
        }, 
        {
            "location": "/guidelines/vsts-scrum/wits/", 
            "text": "Work Item Types (WIT)\n\n\nWITs in UoN are defined by the SCRUM template we use.  \n\n\nThese are;\n\n\n\n\nProduct Backlog Items (known as PBIs)  \n\n\nBugs  \n\n\nTasks  \n\n\nImpediments  \n\n\n\n\nThe below terms definitions (and many more helpful definitions) and taken from \nhttps://www.scrumalliance.org\n\n\nProduct Backlog Items\n\n\nIn Scrum, a product backlog item (\"PBI\", \"backlog item\", or \"item\") is a unit of work small enough to be completed by a team in one Sprint iteration. Backlog items are decomposed into one or more tasks.\n\nA PBI workflow is as follows: \n\n\n\n\nOnly the Product Owner should move the PBI through these stage gates. \n\n\nBugs\n\n\nThese represent a problem or potential problem in your solution.  These can be raised by anyone and can be committed into a sprint by the agreement of the team\n\nThe lifecycle of a bug is as follows; \n\n\n\n\nTasks\n\n\nIn Scrum, a sprint task (or task) is a unit of work generally between four and sixteen hours. Team members volunteer for tasks. They update the estimated number of hours remaining on a daily basis, influencing the sprint burndown chart. Tasks are contained by backlog items.\nScrum literature encourages splitting a task into several if the estimate exceeds twelve hours.\n\nThe stages of a task are as the below; \n\n\n\n\nImpediments\n\n\nAnything that prevents a team member from performing work as efficiently as possible is an impediment. Each team member has an opportunity to announce impediments during the daily Scrum meeting. The Scrum Master is charged with ensuring impediments get resolved. Scrum Masters often arrange sidebar meetings when impediments cannot be resolved on the spot in the daily Scrum meeting.  \n\n\nImpediments definition\n\n\n\n\nHoliday that was taken at short notice, i.e. wasn\u2019t planned before the sprint was planned  \n\n\nAny other kind of absence such as Sickness, compassionate leave, regardless of whether booked before the sprint was planned or not  \n\n\nPlanned department and Company meetings e.g. Staff IT Updates or away days  \n\n\n\n\nNot impediments\n\n\n\n\nProject Team meetings relating to own product area, e.g. sprint planning, retro, review- Not an impediment, part of 1h/day slack  \n\n\nProject Team meetings relating to project Sandy as a whole, e.g. Project Sandy update meeting - Not an impediment, part of 1h/day slack  \n\n\nHoliday planned before the sprint \u2013 Not an impediment \u2013 Sprint capacity reduced to reflect this  \n\n\nPlanned Training\u2013 Not an impediment \u2013 Sprint capacity reduced to reflect this, or will be added as a task  \n\n\nPlanned Knowledge transfer\u2013 Not an impediment \u2013 Sprint capacity reduced to reflect this, or will be added as a task  \n\n\nDoing general administration such as timesheets, expense claims, Changing IT equipment, desk moves, Payroll/Finance enquiries\u2026 Not an impediment, part of 1h/day slack  \n\n\n\n\nMay/may not be impediments depending on duration\n\n\n\n\nWorking on emergency support issue \u2013 Firstly requires approval, then If \n 0.5 hour then Impediment, if \n= 0.5 hour, not an impediment, part of 1h/day slack  \n\n\nSpending time with colleague(s) (walk up or in a meeting) also from Project to assist them on other matters relating to Project, but not relating to their current task- If \n 0.5 hour then Impediment, if \n= 0.5 hour, not an impediment, part of 1h/day slack  \n\n\nSpending time with colleagues (walk up or in a meeting) not from Project to assist them- Firstly requires approval, then If \n 0.5 hour then Impediment, if \n= 0.5 hour, not an impediment, part of 1h/day slack  \n\n\nAny other activity distracting you from your current task and not listed above - If \n 0.5 hour then Impediment, if \n= 0.5 hour, not an impediment, part of 1h/day slack  \n\n\n\n\nWalk-ups / Meeting invitations from outside your projects\n\n\nNo team member should expect support requests or walk ups from outside your project unless approved by your Product Owner.  \n\n\nFor walk ups inside your project, please use your discretion.", 
            "title": "WITS"
        }, 
        {
            "location": "/guidelines/vsts-scrum/wits/#work-item-types-wit", 
            "text": "WITs in UoN are defined by the SCRUM template we use.    These are;   Product Backlog Items (known as PBIs)    Bugs    Tasks    Impediments     The below terms definitions (and many more helpful definitions) and taken from  https://www.scrumalliance.org", 
            "title": "Work Item Types (WIT)"
        }, 
        {
            "location": "/guidelines/vsts-scrum/wits/#product-backlog-items", 
            "text": "In Scrum, a product backlog item (\"PBI\", \"backlog item\", or \"item\") is a unit of work small enough to be completed by a team in one Sprint iteration. Backlog items are decomposed into one or more tasks. \nA PBI workflow is as follows:    Only the Product Owner should move the PBI through these stage gates.", 
            "title": "Product Backlog Items"
        }, 
        {
            "location": "/guidelines/vsts-scrum/wits/#bugs", 
            "text": "These represent a problem or potential problem in your solution.  These can be raised by anyone and can be committed into a sprint by the agreement of the team \nThe lifecycle of a bug is as follows;", 
            "title": "Bugs"
        }, 
        {
            "location": "/guidelines/vsts-scrum/wits/#tasks", 
            "text": "In Scrum, a sprint task (or task) is a unit of work generally between four and sixteen hours. Team members volunteer for tasks. They update the estimated number of hours remaining on a daily basis, influencing the sprint burndown chart. Tasks are contained by backlog items.\nScrum literature encourages splitting a task into several if the estimate exceeds twelve hours. \nThe stages of a task are as the below;", 
            "title": "Tasks"
        }, 
        {
            "location": "/guidelines/vsts-scrum/wits/#impediments", 
            "text": "Anything that prevents a team member from performing work as efficiently as possible is an impediment. Each team member has an opportunity to announce impediments during the daily Scrum meeting. The Scrum Master is charged with ensuring impediments get resolved. Scrum Masters often arrange sidebar meetings when impediments cannot be resolved on the spot in the daily Scrum meeting.", 
            "title": "Impediments"
        }, 
        {
            "location": "/guidelines/vsts-scrum/wits/#impediments-definition", 
            "text": "Holiday that was taken at short notice, i.e. wasn\u2019t planned before the sprint was planned    Any other kind of absence such as Sickness, compassionate leave, regardless of whether booked before the sprint was planned or not    Planned department and Company meetings e.g. Staff IT Updates or away days", 
            "title": "Impediments definition"
        }, 
        {
            "location": "/guidelines/vsts-scrum/wits/#not-impediments", 
            "text": "Project Team meetings relating to own product area, e.g. sprint planning, retro, review- Not an impediment, part of 1h/day slack    Project Team meetings relating to project Sandy as a whole, e.g. Project Sandy update meeting - Not an impediment, part of 1h/day slack    Holiday planned before the sprint \u2013 Not an impediment \u2013 Sprint capacity reduced to reflect this    Planned Training\u2013 Not an impediment \u2013 Sprint capacity reduced to reflect this, or will be added as a task    Planned Knowledge transfer\u2013 Not an impediment \u2013 Sprint capacity reduced to reflect this, or will be added as a task    Doing general administration such as timesheets, expense claims, Changing IT equipment, desk moves, Payroll/Finance enquiries\u2026 Not an impediment, part of 1h/day slack", 
            "title": "Not impediments"
        }, 
        {
            "location": "/guidelines/vsts-scrum/wits/#maymay-not-be-impediments-depending-on-duration", 
            "text": "Working on emergency support issue \u2013 Firstly requires approval, then If   0.5 hour then Impediment, if  = 0.5 hour, not an impediment, part of 1h/day slack    Spending time with colleague(s) (walk up or in a meeting) also from Project to assist them on other matters relating to Project, but not relating to their current task- If   0.5 hour then Impediment, if  = 0.5 hour, not an impediment, part of 1h/day slack    Spending time with colleagues (walk up or in a meeting) not from Project to assist them- Firstly requires approval, then If   0.5 hour then Impediment, if  = 0.5 hour, not an impediment, part of 1h/day slack    Any other activity distracting you from your current task and not listed above - If   0.5 hour then Impediment, if  = 0.5 hour, not an impediment, part of 1h/day slack", 
            "title": "May/may not be impediments depending on duration"
        }, 
        {
            "location": "/guidelines/vsts-scrum/wits/#walk-ups-meeting-invitations-from-outside-your-projects", 
            "text": "No team member should expect support requests or walk ups from outside your project unless approved by your Product Owner.    For walk ups inside your project, please use your discretion.", 
            "title": "Walk-ups / Meeting invitations from outside your projects"
        }, 
        {
            "location": "/guidelines/vsts-scrum/customisation/", 
            "text": "Customisation of WITs\n\n\nIn order to gain maximum MI from VSTS, some customisation has been made to WITs and the Process Flow.  \n\n\nThese are listed here;  \n\n\nWIT Changes\n\n\nPBI\n\n\n\n\n\n\n\n\nDate\n\n\nChange\n\n\nWhy\n\n\nChanged By\n\n\nApproved By\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTask\n\n\n\n\n\n\n\n\nDate\n\n\nChange\n\n\nWhy\n\n\nChanged By\n\n\nApproved By\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBug\n\n\n\n\n\n\n\n\nDate\n\n\nChange\n\n\nWhy\n\n\nChanged By\n\n\nApproved By\n\n\n\n\n\n\n\n\n\n\n03/07/2017\n\n\nRemoved 'Remaining Work' from Bug template\n\n\nTo track hours in tasks rather than bugs\n\n\nRichard Speirs\n\n\nRichard Speirs\n\n\n\n\n\n\n\n\nImpediment\n\n\n\n\n\n\n\n\nDate\n\n\nChange\n\n\nWhy\n\n\nChanged By\n\n\nApproved By\n\n\n\n\n\n\n\n\n\n\n13/03/2017\n\n\nAdded Impediment Source\n\n\nTo track who forced an impediment on the team\n\n\nRichard Speirs\n\n\nRichard Speirs\n\n\n\n\n\n\n13/03/2017\n\n\nAdded Impediment Category\n\n\nTo see where the most time is being lost\n\n\nRichard Speirs\n\n\nRichard Speirs\n\n\n\n\n\n\n\n\nProcess Flow Changes\n\n\nPBI\n\n\n\n\n\n\n\n\nDate\n\n\nChange\n\n\nWhy\n\n\nChanged By\n\n\nApproved By\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTask\n\n\n\n\n\n\n\n\nDate\n\n\nChange\n\n\nWhy\n\n\nChanged By\n\n\nApproved By\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBug\n\n\n\n\n\n\n\n\nDate\n\n\nChange\n\n\nWhy\n\n\nChanged By\n\n\nApproved By\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImpediment\n\n\n\n\n\n\n\n\nDate\n\n\nChange\n\n\nWhy\n\n\nChanged By\n\n\nApproved By", 
            "title": "Customisation"
        }, 
        {
            "location": "/guidelines/vsts-scrum/customisation/#customisation-of-wits", 
            "text": "In order to gain maximum MI from VSTS, some customisation has been made to WITs and the Process Flow.    These are listed here;", 
            "title": "Customisation of WITs"
        }, 
        {
            "location": "/guidelines/vsts-scrum/customisation/#wit-changes", 
            "text": "", 
            "title": "WIT Changes"
        }, 
        {
            "location": "/guidelines/vsts-scrum/customisation/#pbi", 
            "text": "Date  Change  Why  Changed By  Approved By", 
            "title": "PBI"
        }, 
        {
            "location": "/guidelines/vsts-scrum/customisation/#task", 
            "text": "Date  Change  Why  Changed By  Approved By", 
            "title": "Task"
        }, 
        {
            "location": "/guidelines/vsts-scrum/customisation/#bug", 
            "text": "Date  Change  Why  Changed By  Approved By      03/07/2017  Removed 'Remaining Work' from Bug template  To track hours in tasks rather than bugs  Richard Speirs  Richard Speirs", 
            "title": "Bug"
        }, 
        {
            "location": "/guidelines/vsts-scrum/customisation/#impediment", 
            "text": "Date  Change  Why  Changed By  Approved By      13/03/2017  Added Impediment Source  To track who forced an impediment on the team  Richard Speirs  Richard Speirs    13/03/2017  Added Impediment Category  To see where the most time is being lost  Richard Speirs  Richard Speirs", 
            "title": "Impediment"
        }, 
        {
            "location": "/guidelines/vsts-scrum/customisation/#process-flow-changes", 
            "text": "", 
            "title": "Process Flow Changes"
        }, 
        {
            "location": "/guidelines/vsts-scrum/customisation/#pbi_1", 
            "text": "Date  Change  Why  Changed By  Approved By", 
            "title": "PBI"
        }, 
        {
            "location": "/guidelines/vsts-scrum/customisation/#task_1", 
            "text": "Date  Change  Why  Changed By  Approved By", 
            "title": "Task"
        }, 
        {
            "location": "/guidelines/vsts-scrum/customisation/#bug_1", 
            "text": "Date  Change  Why  Changed By  Approved By", 
            "title": "Bug"
        }, 
        {
            "location": "/guidelines/vsts-scrum/customisation/#impediment_1", 
            "text": "Date  Change  Why  Changed By  Approved By", 
            "title": "Impediment"
        }
    ]
}